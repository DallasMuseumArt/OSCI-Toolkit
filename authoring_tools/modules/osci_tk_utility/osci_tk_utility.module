<?php


/**
 * Create the content for a figure based on the asset type
 */
function osci_tk_utility_osci_tk_figure_content($args) {
  
  $asset = node_load($args['item']['asset_reference']); 

  if (!isset($args['item']['export'])) {
	  $args['item']['export'] = false;
  }
  
  switch($asset->type) {
  	//TODO: video & audio were simple tests to make sure this worked... should probably be moved somewhere else
    case 'video_asset':
	  $src = _osci_tk_epub_asset_process_uri($asset->field_video_file['und'][0]['uri'], $args['item']['export']);
      return '<video controls="controls"><source src="' . $src . '" type="' . $asset->field_video_file['und'][0]['filemime'] . '" /></video>';
      break;
    case 'audio_asset':
	  $src = _osci_tk_epub_asset_process_uri($asset->field_audio_file['und'][0]['uri'], $args['item']['export']);
      return '<audio controls="controls" preload="auto" autobuffer="autobuffer"><source src="' . $src . '" type="' . $asset->field_audio_file['und'][0]['filemime'] . '" /></audio>';
      break;
    case 'image_asset':
	  $src = _osci_tk_epub_asset_process_uri($asset->field_image['und'][0]['uri'], $args['item']['export']);
	  return '<img src="' . $src . '" />';
	  break;
  }  
}


/**
 * Return resources associated with the figure
 */
function osci_tk_utility_osci_tk_figure_resources($figure) {
  
  $result = array(
  	'items' => array(), 
  	'content_doc_media_type' => null
  );
  
  $asset = node_load($figure['asset_reference']);  
  if (empty($asset)) return $result;
  
  switch($asset->type) {
    case 'video_asset':
      // Leave the content doc media type as null to indicate there is none
      $item = array(
      	'media-type' => $asset->field_video_file['und'][0]['filemime'],
        'uri' => $asset->field_video_file['und'][0]['uri'],
      );
      $result['items'][] = $item;
      return $result;
    case 'audio_asset':
      // Leave the content doc media type as null to indicate there is none
      $item = array(
      	'media-type' => $asset->field_audio_file['und'][0]['filemime'],
        'uri' => $asset->field_audio_file['und'][0]['uri'],
      );
      $result['items'][] = $item;
      return $result;
    case 'conservation_asset':
      $result['content_doc_media_type'] = 'application/osci-tk-conservation-figure';
      // TODO: add files?
      return $result;
    case 'iip_asset':
      $result['content_doc_media_type'] = 'application/osci-tk-iip-figure';
      // TODO: add files?     
      return $result;
    case 'image_asset':
	  $item = array(
		'media-type' => $asset->field_image['und'][0]['filemime'],
		'uri' => $asset->field_image['und'][0]['uri']
	  );
	  $result['items'][] = $item;
      // TODO: add files?     
      return $result;
    case 'svg_asset':
      $result['content_doc_media_type'] = 'application/osci-tk-svg-figure';
      // TODO: add files?      
      return $result;
  }
  
  return null;  
  
}


/**
 * hook_theme implementation
 * @return array
 */
function osci_tk_utility_theme()
{
	return array(
		'osci_tk_fieldset_tabs' => array(
			'render element' => 'element'
		)
	);
}

/**
 * This is terrible, but we might need it
 * @param type $node
 * @param type $view_mode
 * @param type $langcode
 * @return type 
 */
//function node_content_view($node, $view_mode, $langcode)
//{
//	$node->view_mode = $view_mode;
//	return $node;
//}

/**
 * Add theme hook suggestions to the node for the current view mode
 * @param type $variables
 * @param type $hook 
 */
function osci_tk_utility_preprocess_node(&$variables, $hook)
{
	$variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'] . '__' . $variables['type'];
	$variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'];
}

/**
 * Theme function for multi-value field tabs
 * @param array $variables the theme variables
 * @return string the processed html
 */
function theme_osci_tk_fieldset_tabs($variables)
{
	drupal_add_library('system', 'ui.tabs');
	drupal_add_js(drupal_get_path('module','osci_tk_utility') . '/js/fieldset_tabs.js');
	
	$element = $variables['element'];
	
	$items = array();
	$childElements = element_children($element);
	$addAnother = null;
	$numAdd = null;
	$output = '';

	foreach($childElements as $key)
	{
		if ($key === 'add_more')
		{
			$addAnother = &$element[$key];
		}
		else if ($key === 'num_add')
		{
			$numAdd = &$element[$key];
		}
		else
		{
			$items[] = &$element[$key];
		}
	}
	
	$tabHtml = '';
	$itemHtml = '';
	foreach($items as $item)
	{
		$id = 'fieldset-tab-' . $item['#id'];
		$itemHtml .= '<div id="' . $id . '" class="fieldset-tab-content">' . drupal_render($item) . '</div>';
		$tabHtml .= '<li><a href="#' . $id . '">' . $item['#weight'] . '</a>';
	}
	
	if ($addAnother)
	{
		$output .= drupal_render($addAnother);
	}
	
	if ($numAdd)
	{
		$output .= drupal_render($numAdd);
	}
	
	$output .= '<div id="fieldset-tabs-' . $element['#field_name'] . '" class="fieldset-tabs">';
	$output .= '<ul>' . $tabHtml . '</ul>';
	$output .= $itemHtml;
	$output .= '</div>';
	
	return $output;
}

function osci_tk_utility_form_alter(&$form, &$form_state, $form_id)
{
	if (strpos($form_id, '_node_form') !== false)
	{
		if (isset($form['field_footnote']))
		{
			array_unshift($form['actions']['submit']['#submit'], '_osci_tk_utility_node_submit');
		}
		
		if (isset($form['field_footnote']))
		{
			$form['field_footnote'][LANGUAGE_NONE]['#theme'] = 'osci_tk_fieldset_tabs';
			unset($form['field_footnote'][LANGUAGE_NONE][$form['field_footnote'][LANGUAGE_NONE]['#max_delta']]);
			$form['field_footnote'][LANGUAGE_NONE]['#max_delta']--;
			
			$form['field_footnote'][LANGUAGE_NONE]['add_more']['#submit'] = array('osci_tk_add_more_footnote_submit');
			$form['field_footnote'][LANGUAGE_NONE]['add_more']['#ajax']['callback'] = 'osci_tk_add_more_footnote_ajax';
			$form['field_footnote'][LANGUAGE_NONE]['num_add'] = array(
				'#type' => 'hidden',
				'#default_value' => 1,
				'#weight' => -100
			);
			
			$childElements = element_children($form['field_footnote'][LANGUAGE_NONE]);
			foreach($childElements as $key)
			{
				if (isset($form['field_footnote'][LANGUAGE_NONE][$key]['_weight']))
				{
					$form['field_footnote'][LANGUAGE_NONE][$key]['_weight']['#type'] = 'hidden';
					$fnId = 'fn-'. $form['nid']['#value'] . '-' . $key;
					$form['field_footnote'][LANGUAGE_NONE][$key]['#prefix'] = '<div class="footnote_identifier" data-fnId="' . $fnId . '">' . $key . ' <span>[footnote:' . $fnId . ']</span></div>';
				}
			}
		}
	}
}

/**
 * Update the figure & footnote numbering if items were deleted
 * @param array $form
 * @param array $form_state 
 */
function _osci_tk_utility_node_submit($form, &$form_state)
{
	$offset = 0;
	$replaceIds = array();
	$newIds = array();
	dpm($form_state);
	//update footnote references for renumbering if one deleted
	if (isset($form_state['values']['field_footnote']))
	{
		//remove hidden field so that drupal saves this field correctly
		unset($form_state['values']['field_footnote'][LANGUAGE_NONE]['num_add']);
		
		$footnoteTemplate = '[footnote:fn-' . $form_state['values']['nid'] . '-';
		foreach($form_state['values']['field_footnote'][LANGUAGE_NONE] as $k => $v)
		{
			if ($k === 'add_more')
			{
				continue;
			}
			
			if (!strlen(trim($v['value'])))
			{
				$offset++;
				$replaceIds[] = $footnoteTemplate . $k . ']';
				$newIds[] = '';
			} 
			else if ($offset > 0) 
			{
				$replaceIds[] = $footnoteTemplate . $k . ']';
				$newIds[] = $footnoteTemplate . ($k - $offset) . ']';
			}
		}
	}
	
	//update figure references for renumbering if one deleted
	if (function_exists("_osci_tk_figure_node_get_replace_ids")) 
	{
		list($figureReplaceIds, $figureNewIds) = _osci_tk_figure_node_get_replace_ids($form, $form_state);
		$replaceIds = array_merge($replaceIds, $figureReplaceIds);
		$newIds = array_merge($newIds, $figureNewIds);
	}
	
	if (count($replaceIds))
	{
		foreach($form_state['values'] as $k => $v)
		{
			if (is_array($v) && isset($v[LANGUAGE_NONE]))
			{
				foreach($v[LANGUAGE_NONE] as $delta => $value)
				{
					if (isset($form_state['values'][$k][LANGUAGE_NONE][$delta]['value']))
					{
						$form_state['values'][$k][LANGUAGE_NONE][$delta]['value'] = 
							str_replace($replaceIds, $newIds, $form_state['values'][$k][LANGUAGE_NONE][$delta]['value']);
					}
				}
			}
		}
	}
}

function osci_tk_add_more_footnote_submit($form, &$form_state)
{
	$button = $form_state['triggering_element'];

	// Go one level up in the form, to the widgets container.
	$element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
	$field_name = $element['#field_name'];
	$langcode = $element['#language'];
	$parents = $element['#field_parents'];

	// Increment the items count.
	$field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
	$field_state['items_count'] = $field_state['items_count'] + $form_state['values']['field_footnote']['und']['num_add'];
	field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);

	$form_state['rebuild'] = TRUE;
}

function osci_tk_add_more_footnote_ajax($form, $form_state)
{
	$button = $form_state['triggering_element'];

	// Go one level up in the form, to the widgets container.
	$element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
	$field_name = $element['#field_name'];
	$langcode = $element['#language'];
	$parents = $element['#field_parents'];

	$field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);

	$field = $field_state['field'];
	if ($field['cardinality'] != FIELD_CARDINALITY_UNLIMITED) {
		return;
	}

	// Add a DIV around the delta receiving the Ajax effect.
	$delta = $element['#max_delta'];
	$element[$delta]['#prefix'] = '<div class="ajax-new-content">' . (isset($element[$delta]['#prefix']) ? $element[$delta]['#prefix'] : '');
	$element[$delta]['#suffix'] = (isset($element[$delta]['#suffix']) ? $element[$delta]['#suffix'] : '') . '</div>';

	return $element;
}
