<?php

function osci_tk_epub_menu()
{
	$items = array();
	
	$items['api/epub/%/content.xhtml'] = array(
		'title' => 'ePub',
		'page callback' => 'osci_tk_epub_render',
		'page arguments' => array(2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
		);
	
	$items['api/epub/%node/nav.xhtml'] = array(
		'title' => 'ePub Navigation Document',
		'page callback' => 'osci_tk_epub_render_navigation_document',
		'page arguments' => array(2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
		);		

	$items['api/epub/%node/toc.ncx'] = array(
		'title' => 'ePub Ncx Document',
		'page callback' => 'osci_tk_epub_render_ncx_document',
		'page arguments' => array(2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
		);	
	
	$items['api/epub/%/package.opf'] = array(
		'title' => 'ePub Package Document',
		'page callback' => 'osci_tk_epub_render_package_document',
		'page arguments' => array(2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
		);	
	
	$items['api/epub/%node/%/figure.xhtml'] = array(
		'title' 			=> 'Figure content document',
		'page callback' 	=> 'osci_tk_epub_render_figure_content_document',
		'page arguments'	=> array(2, 3),
		'access arguments' 	=> array('access content'),
		'type' 				=> MENU_CALLBACK,
		);
	
	$items['api/epub/%/publish'] = array(	
		'title' => 'Publish ePub',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('osci_tk_epub_publish_form', 2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
		'file' => 'osci_tk_epub.publish.inc'
		);
	
	return $items;
}


/** 
 * hook_node_insert
 */
function osci_tk_epub_node_insert($node) {

	if (!isset($node->book) || (!$node->book['bid'])) return;

  // Pre-generate epub content
	_osci_tk_epub_generate_node_documents($node);

}


/**
 * hook_node_submit
 */
function osci_tk_epub_node_submit($node, $form, &$form_state)
{

	if (isset($node->book) && $node->book['bid']) {

    // Clearing the epub caches here will cause the output to be regenerated 
    // even if the node is being removed from the book
		cache_set("osci_epub_package_{$node->book['bid']}", null);     
		cache_set("osci_epub_toc_{$node->book['bid']}", null);  
		cache_set("osci_epub_content_{$node->nid}", null);

		if (isset($node->field_figure['und'])) {
			foreach ($node->field_figure['und'] as $index => $value) {
				cache_set("osci_epub_figure_{$node->nid}-$index", null);
			}      
		}    

	}

  //add a uuid if not added by user
	if (isset($form_state['values']['field_osci_tk_identifier']) && !strlen($form_state['values']['field_osci_tk_identifier']['und'][0]['value']))
	{
		$node->field_osci_tk_identifier['und'][0]['value'] = uniqid(" urn:uuid:", true);
	}

}


/** 
 * hook_node_update
 */
function osci_tk_epub_node_update($node) {

	if (!isset($node->book) || (!$node->book['bid'])) return;

  // Pre-generate epub content
  //_osci_tk_epub_generate_node_documents($node);

}

/**
 * hook_field_formatter_info
 */
function osci_tk_epub_field_formatter_info() {
	$formatters = array(
		'osci_tk_section' => array(
			'label'         => t('OSCI Toolkit Section'),
			'field types'   => array('text_long', 'text'),
			)
		);
	
	return $formatters;
}


function osci_tk_epub_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
	
	switch($display['type'])
	{
		case 'osci_tk_section':
		foreach($items as $delta => $item)
		{
			$item['delta'] = $delta;
			$item['field_name'] = $field['field_name'];
			$element[$delta] = array(
				'#theme'	=> 'osci_tk_epub_section',
				'#item'		=> $item,
			);
		}
		break;
	}
	
	return $element;
}


function osci_tk_epub_theme($existing, $type, $theme, $path) {
	return array(
		'node__epub' => array(
			'template'	=> 'templates/node__epub',
			'variables' => array()
		),
		'epub_package' => array(
			'variables' => array(
				'pub_id' 		=> null,
				'title' 		=> null,
				'language' 		=> 'en',
				'properties' 	=> array(),
				'manifest' 		=> array(),
				'spine' 		=> array()
			),
			'template' => 'templates/epub_package',
			'file' => 'osci_tk_epub.templates.inc',
		),
		'epub_figure_content_document' => array(
			'template' 	=> 'templates/epub_figure_content_document',
			'variables' => array()
		),
		'osci_tk_figure_link__epub' => array(
			'template'	=> 'templates/epub_figure_link',
			'variables' => array(
				'section' 	=> NULL,
				'figure' 	=> NULL,
				'fig_index' => NULL,
				'fig_id'    => null,
				'fig_text'  => null
			)
		),
		'osci_tk_footnote_link__epub' => array(
			'template'	=> 'templates/epub_footnote_link',
			'variables' => array(
				'footnote_id' => NULL,
				'footnote_index' => null
			)
		),
		'osci_tk_footnote_epub' => array(
			'template' => 'templates/osci_tk_footnote_epub',
			'variables' => array(
				'items' => array()
			),
		),
		'osci_tk_epub_section' => array(
			'template' => 'templates/osci_tk_epub_section',
			'variables' => array('item' => ''),
			'file' => 'osci_tk_epub.templates.inc',
		),
		'osci_tk_epub_mimetype' => array(
			'template' => 'templates/osci_tk_epub_mimetype',
			'variables' => array(),
		),
		'osci_tk_epub_container_xml' => array(
			'template' => 'templates/osci_tk_epub_container_xml',
			'variables' => array(
				'rootPath' => ''
			),
		),
		'osci_tk_epub_navigation' => array(
			'template' => 'templates/osci_tk_epub_navigation',
			'variables' => array(
				'content' => ''
			)
		),
		'osci_tk_epub_ncx' => array(
			'template' => 'templates/osci_tk_epub_ncx',
			'variables' => array(
				'navMap' => '',
				'metadata' => array()
			)
		),
		'field__osci_tk_epub_field' => array(
			'template' => 'templates/osci_tk_epub_field',
			'variables' => array()
		)
	);
}

//Override the default field theming
function osci_tk_epub_preprocess_field(&$variables)
{
	array_unshift($variables['theme_hook_suggestions'], 'field__osci_tk_epub_field');
}

// register custom view mode 'epub'
function osci_tk_epub_entity_info_alter(&$entity_info) 
{
	foreach($entity_info as $type => $entity) 
	{
		$entity_info[$type]['view modes']['epub'] = array(
			'label' 			=> t('ePub'),
			'custom settings' 	=> TRUE,
			);
	}
}

function osci_tk_epub_render($nid)
{
	global $osci_tk_view_mode;
	$osci_tk_view_mode = 'epub';
	$dev = false;

	$output = '';
	$vid = _osci_tk_epub_get_revision_id($nid);

	if ($vid || !isset($_GET['revision']))
	{
		$node = node_load($nid, $vid);
		$output = _osci_tk_epub_generate_content_document($node, false, $dev);
	} else {
		return drupal_not_found();
	}
	
	if ($dev) return $output;
	print $output;
	drupal_exit(); 
}

function _osci_tk_epub_generate_content_document($node, $forExport = false, $noCache = false)
{
	global $osci_tk_placed_figures, $osci_tk_epub_for_export;

	$osci_tk_epub_for_export = $forExport;

	/***** Check the cache *****/
	if (!$noCache) {
		$cache_key = "osci_epub_content_{$node->nid}_{$node->vid}"; 
		$output = _osci_tk_epub_check_cache($cache_key);    
		if (!is_null($output)) {
			return $output; 
		}    
	}  

	$view = node_view($node, 'epub');

	$fields = element_children($view);
	foreach($fields as $key)
	{
		$element = $view[$key];
		switch($key)
		{
			case 'field_footnote':
				$view[$key]['#theme'] = 'osci_tk_footnote_epub';
				$i = 0;
				foreach($view[$key]['#items'] as $k => $v)
				{
					$view[$key]['#items'][$k]['fn_id'] = 'fn-' . $node->nid . '-' . $i;
					$i++;
				}
				break;

			case 'field_figure':
				$items = element_children($element);
				foreach($items as $delta)
				{  
					$view[$key][$delta]['#item']['export'] = $forExport;

					//if figure placed inline do not output it again
					if (is_array($osci_tk_placed_figures) && in_array($delta, $osci_tk_placed_figures))
					{
						//unset($view[$key][$delta]);
					}
				}

				break;
		}
	}

	$css = _osci_tk_epub_get_book_css($node, $forExport);

	drupal_static_reset('drupal_add_css');
	if ($css)
	{
		drupal_add_css($css, array('type' => 'external'));
	}
	
	$output = drupal_render($view);
	
	if (!$noCache) {
		cache_set($cache_key, $output, 'cache');              
	}  

	return $output;	
}


/**
 * Render the navigation document for the book corresponding to this node
 */
function osci_tk_epub_render_navigation_document($node)
{
	$dev = false;
	$output = _osci_tk_epub_generate_navigation_document($node, false, $dev);
	if ($dev) return $output;
	print $output;
	drupal_exit();  
}


/**
 * Render the package document for the book corresponding to this node
 */
function osci_tk_epub_render_package_document($nid)
{
	$dev = false;  

	$node = node_load($nid);

	$output = _osci_tk_epub_generate_package_document($node, false, $dev);
	if ($dev) return $output;

  //header('Content-type: application/oebps-package+xml');
	print $output;
	drupal_exit();
}


function osci_tk_epub_render_figure_content_document($node, $index) {

	if (!isset($node->field_figure) || !isset($node->field_figure['und'][$index])) return MENU_NOT_FOUND;
	if (!is_numeric($index)) return MENU_NOT_FOUND;

	$dev = false;  
	$output = _osci_tk_epub_generate_figure_document($node, $index, $dev);
	if ($dev) return $output;

	//header('Content-type: application/oebps-package+xml');
	print $output;
	drupal_exit();
}

function _osci_tk_epub_generate_figure_document($node, $index, $noCache = false)
{

	/***** Check the cache *****/
	if (!$noCache) {
		$cache_key = "osci_epub_figure_{$node->nid}-$index"; 
		$output = _osci_tk_epub_check_cache($cache_key);    
		if (!is_null($output)) {
			return $output; 
		}    
	}      

	$view = node_view($node, 'epub');
	// TODO: Handle the export case?	
	$content = drupal_render($view['field_figure'][$index]);
	
	// pass the prepared figure to the theme function which wraps it in 
	// a valid epub3 content document
	$themed_figure = theme('epub_figure_content_document', array('figure_markup' => $content));
	
	if (!$noCache) {
		cache_set($cache_key, $themed_figure, 'cache');              
	}  	
	
	// output the themed figure
	return $themed_figure;
}

function osci_tk_epub_preprocess_epub_figure_link(&$vars) {
	$vars['base_url'] = url('', array('absolute' => TRUE));
}

function _osci_tk_epub_check_cache($cache_key) {

  // Check static variable    
	$output = &drupal_static($cache_key); 
	if (!is_null($output)) return $output;

  // Check cache
	if ($cache = cache_get($cache_key)) {
    $output = $cache->data; // Sets the static variable as well
    return $output;
}

return null;

}


function _osci_tk_epub_generate_navigation_document($node, $forExport = false, $noCache = false) {

    // Generate table of contents
	$output = _osci_tk_epub_navigation_generate_toc($node, $forExport, $noCache);

    // Generate other tables...
	$output .= _osci_tk_epub_navigation_generate_index($node, $forExport, $noCache);
	
	$output = theme("osci_tk_epub_navigation", array('content' => $output));
	
	return $output;

}


/**
 * Generate all documents related to a node. Used to pre-load the cache.
 */
function _osci_tk_epub_generate_node_documents($node) {

	_osci_tk_epub_generate_navigation_document($node);
	_osci_tk_epub_generate_package_document($node);  
	_osci_tk_epub_generate_content_document($node);  

    /*
     * TODO: resolve _osci_tk_conservation_get_conservation_html() being undefined
    if (isset($node->field_figure['und'])) {
        foreach ($node->field_figure['und'] as $index => $value) {
            _osci_tk_epub_generate_figure_document($node, $index);
        }      
    } 
    */       
    
}


function _osci_tk_epub_generate_package_document($node, $forExport = false, $noCache = false) {
	// if this isn't a publication, exit
	if ($node->type !== 'publication') return null;   

	/***** Check the cache *****/
	if (!$noCache) {
		$cache_key = "osci_epub_package_{$node->nid}"; 
		$output = _osci_tk_epub_check_cache($cache_key);    
		if (!is_null($output)) {
			return $output; 
		}    
	}

	/***** Find all of the resources for this book *****/	
	$data = _osci_tk_epub_get_book_resources($node);

	$metadata = _osci_tk_epub_get_book_metadata($node, $data);
	
    // Should this data structure be passed through _osci_tk_epub_package_build_data instead?
	$arguments = array(
		'metadata' => $metadata,
		'manifest' => array(),
		'spine' => array()
		);

	/***** Build the manifest and spine *****/

    // Navigation document
	$arguments['manifest'][] = array(
		'id' => 'nav',
		'href' => $forExport ? 'nav.xhtml' : url("api/epub/{$node->nid}/nav.xhtml", array('absolute' => true)),
		'media-type' => 'application/xhtml+xml',
		'properties' => 'nav'
		);  

    // NCX document
	$arguments['manifest'][] = array(
		'id' => 'ncxtoc',
		'href' => $forExport ? 'toc.ncx' : url("api/epub/{$node->nid}/toc.ncx", array('absolute' => true)),
		'media-type' => 'application/x-dtbncx+xml'
		);   

	//Cover Image
	if (isset($node->field_osci_tk_cover_image) && isset($node->field_osci_tk_cover_image['und'][0]))
	{
		$arguments['manifest'][] = array(
			'id' => 'cover-image',
			'href' => _osci_tk_epub_asset_process_uri($node->field_osci_tk_cover_image['und'][0]['uri'], $forExport),
			'media-type' => $node->field_osci_tk_cover_image['und'][0]['filemime'],
			'properties' => 'cover-image'
			);
	}
	
	//CSS
	if (isset($node->field_osci_tk_css) && $node->field_osci_tk_css['und'][0])
	{
		$arguments['manifest'][] = array(
			'id' => 'css',
			'href' => _osci_tk_epub_asset_process_uri($node->field_osci_tk_css['und'][0]['uri'], $forExport),
			'media-type' => 'text/css'
			);
	}

    // Content documents go into the manifest and the spine
	foreach($data['content_nids'] as $content) {
		$id = 'section-' . $content['nid'];
		$arguments['manifest'][] = array(
			'id' => $id,
			'href' => $forExport ? $content['filename'] : $content['url'],
			'media-type' => 'application/xhtml+xml',      
			);      
		$arguments['spine'][] = array(
			'idref' => $id,
			);
	}

	$addedResources = array();
    // Add figure resources to the manifest
    foreach($data['figures'] as $figure) {      
      
      if (isset($figure['content-doc'])) {
        $arguments['manifest'][] = array(
          'id' => "figure-{$figure['nid']}-{$figure['index']}",
          'href' => $forExport ? $figure['content-doc']['filename'] : $figure['content-doc']['url'],
          'media-type' => $figure['content-doc']['media-type'],        
        );
      }
      
      if (isset($figure['resources'])) {
        
        foreach($figure['resources'] as $index => $item) {
  		$resourceHref = _osci_tk_epub_asset_process_uri($item['uri'], $forExport);
  		
  		//if the resource has already been added, do not add again
  		if (in_array($resourceHref, $addedResources)) 
  		{
  		  continue;
  		}
  		
  		$addedResources[] = $resourceHref;
  		
          $arguments['manifest'][] = array(
            'id' => "figure-resource-" . count($addedResources),
            'href' => $resourceHref,
            'media-type' => $item['media-type'],
          );      
        }
        
      }
      
    }

    // TODO: Additional stuff for the manifest (figures, etc.)    

	$output = theme('epub_package', $arguments);

	if (!$noCache) {
		cache_set($cache_key, $output, 'cache');              
	}  

	return $output;
}

/**
 * Render the ePub table of contents for the book of the given node
 */
function _osci_tk_epub_navigation_generate_toc($node, $forExport = false, $noCache = false)
{
	if ($node->type !== 'publication') return null;
	
	// Check the cache
	if (!$noCache) {
		$cache_key = "osci_epub_toc_{$node->nid}";
		$output = _osci_tk_epub_check_cache($cache_key);
		if (!is_null($output)) {
			return $output;
		}
	}
	
	// first get flattened nodetree and get node information
	$toc = array();
	for ($i = 0; $i < count($node->field_nodetree['und']); $i++) {
		$section = node_load($node->field_nodetree['und'][$i]['target_nid']);
		
		// prepare toc item attributes
		$thumb = null;
		if (isset($section->field_section_image['und'][0])) {
			$thumb = image_style_url('osci_tk_thumbnail_square', $section->field_section_image);
		} 
		$subtitle = null;
		if (isset($section->field_subtitle['und'][0])) {
			$subtitle = $section->field_subtitle['und'][0]['value'];
		}

		$tocItem = array(  
			'nid'       => $section->nid,
			'title'     => $section->title, 
			'timestamp' => $section->created, 
			'url'       => _osci_tk_epub_node_content_url($section->nid),
			'thumbnail' => $thumb,
			'subtitle'  => $subtitle,
			'depth'     => $node->field_nodetree['und'][$i]['depth']
		);
		$toc[] = $tocItem;
	}
	
	$output = "<nav epub:type='toc' id='book-{$node->nid}-toc'>";
	$output .= "<h1>Table of Contents</h1>"; // Optional header
	$output .= osci_tk_epub_navigation_generate_toc_item_list($toc);
	$output .= "</nav>";
	
	if (!$noCache) {
		cache_set($cache_key, $output, 'cache');
	}
	
	return $output;
}

function osci_tk_epub_navigation_generate_toc_item_list($toc) {
	$output = '';
	for ($i=0; $i < count($toc); $i++) {
		// add top OL if first item
		if ($i === 0) {
			$output = "<ol>";
		}
		// add another nesting if depth has increased and we're on at least the second item
		if ($i > 0) {
			if ($toc[$i]['depth'] > $toc[($i - 1)]['depth']) {
				$output .= "<ol>";
			}
		}
		$attrs = "data-section_id='{$toc[$i]['nid']}'";
		$attrs .= " data-subtitle='{$toc[$i]['subtitle']}'";
		$attrs .= " data-timestamp='{$toc[$i]['timestamp']}'";
		$attrs .= " data-thumbnail='{$toc[$i]['thumbnail']}'";
		$output .= "<li><a href='{$toc[$i]['url']}' {$attrs}>{$toc[$i]['title']}</a>";
		
		// if sequence ends or depth will decrease on next iteration, close the li and ol tag now
		if ($i == (count($toc) - 1) ) {
			for($c = 0; $c <= $toc[$i]['depth']; $c++) {
				$output .= "</li></ol>";
			}
		}
		elseif ($toc[($i + 1)]['depth'] < $toc[$i]['depth']) {
			for($c = 0; $c < ($toc[$i]['depth'] - $toc[($i + 1)]['depth']); $c++) {
				$output .= "</li></ol>";
			}
		}
	}
	return $output;
}

/**
 * Recursively collects data to build the package document
 */
function _osci_tk_epub_package_build_data($pubNode, &$data) {

	if ($pubNode->changed > $data['modified']) $data['modified'] = $pubNode->changed;

	for ($i=0; $i < count($pubNode->field_nodetree['und']); $i++)
	{
		$node = node_load($pubNode->field_nodetree['und'][$i]['target_nid']);
		
		$data['content_nids'][] = array(
			'nid' => $node->nid,
			'filename' => _osci_tk_epub_node_content_filename($node->nid),
			'url' => _osci_tk_epub_node_content_url($node->nid),
			'title' => $node->title
		);

		if (isset($node->field_figure['und'])) {

			foreach($node->field_figure['und'] as $index => $figure) {
				// Invoke the hook to get information about resources for this figure        
				$resources = module_invoke_all('osci_tk_figure_resources', $figure);        

				$figure_data = array(
					'nid' => $node->nid,
					'index' => $index,
					'resources' => isset($resources['items']) ? $resources['items'] : null,
					);                

				// If the figure has a media type for the content document, add it as a resource
				// Otherwise, a content document is assumed not to be required for the figure
				if (isset($resources['content_doc_media_type'])) {
					$figure_data['content-doc'] = array(
						'media-type' => $resources['content_doc_media_type'],
						'filename' => _osci_tk_epub_node_figure_filename($node->nid, $index),
						'url' => _osci_tk_epub_node_figure_url($node->nid, $index)          
						);          
				}         

				$data['figures'][] = $figure_data;

			}
		}
	}
}

function _osci_tk_epub_get_book_resources(&$node)
{
	/***** Find all of the resources for this book *****/
	$data = array(
		'modified' => 0,
		'content_nids' => array(),
		'figures' => array()
	);

    // There should only be one node at the top level
	_osci_tk_epub_package_build_data($node, $data);
	return $data;
}

function _osci_tk_clean_filename_string($string)
{
	//return preg_replace("[^A-Za-z0-9\-]", "", str_replace(' ', '-', strtolower(trim($string))));
	$string = mb_ereg_replace('/[\x00-\x1F]/u', '', $string);
	$string = str_replace(' ', '-', strtolower(trim($string)));
	if (substr(PHP_OS, 0, 3) == 'WIN') {
    	// These characters are not allowed in Windows filenames
		$string = str_replace(array(':', '*', '?', '"', '<', '>', '|'), '', $string);
	}

	return $string;
}

function _osci_tk_epub_node_content_filename($nid)
{
	return 'section-' . $nid . '.xhtml';
}

function _osci_tk_epub_node_figure_filename($nid, $index)
{
	return 'figure-' . $nid . '-' . $index . '.xhtml';
}

function _osci_tk_epub_node_content_url($nid)
{
	return url("api/epub/{$nid}/content.xhtml", array('absolute' => true));
}

function _osci_tk_epub_node_figure_url($nid, $index)
{
	return url("api/epub/{$nid}/{$index}/figure.xhtml", array('absolute' => true));
}

function _osci_tk_epub_asset_process_uri($uri, $forExport = false)
{
	if ($forExport)
	{
		$start = strrpos($uri, '/') + 1;
		$len = strrpos($uri, '.') - $start;
		$filename = substr($uri, $start, $len);
		$cleanFilename = _osci_tk_clean_filename_string($filename);
		$uri = str_replace($filename, $cleanFilename, $uri);

		return str_replace(file_uri_scheme($uri) . '://', "resources/", $uri);
	} 
	else 
	{
		return file_create_url($uri);
	}
}

function _osci_tk_epub_get_book_metadata(&$pub, &$data)
{
	$metadata = array();
	
	if ($pub->type !== 'publication')
	{
		return $metadata;
	}
	
	$lang = $pub->language;
	
	//get the title
	$metadata['title'] = $pub->title;
	
	//get any subtitles
	if (isset($pub->field_osci_tk_subtitle) && isset($pub->field_osci_tk_subtitle[$lang]))
	{
		$metadata['subtitle'] = array();
		foreach($pub->field_osci_tk_subtitle[$lang] as $k => $v)
		{			
			$metadata['subtitle'][] = $v['value'];
		}
	}
	
	//Get the identifier
	if (isset($pub->field_osci_tk_identifier) && 
		isset($pub->field_osci_tk_identifier[$lang]) &&
		strlen($pub->field_osci_tk_identifier[$lang][0]['value']))
	{
		$metadata['identifier'] = $pub->field_osci_tk_identifier[$lang][0]['value'];
	}
	
	//Get the creator
	if (isset($pub->field_osci_tk_creator) && isset($pub->field_osci_tk_creator[$lang]))
	{
		$metadata['creator'] = array();
		foreach($pub->field_osci_tk_creator[$lang] as $k => $v)
		{			
			$metadata['creator'][] = $v['value'];
		}
	}
	
	//Get the description
	if (isset($pub->field_osci_tk_description) && 
		isset($pub->field_osci_tk_description[$lang]) &&
		strlen($pub->field_osci_tk_description[$lang][0]['value']))
	{
		$metadata['description'] = $pub->field_osci_tk_description[$lang][0]['value'];
	}
	
	//Get the publisher
	if (isset($pub->field_osci_tk_publisher) && 
		isset($pub->field_osci_tk_publisher[$lang]) &&
		strlen($pub->field_osci_tk_publisher[$lang][0]['value']))
	{
		$metadata['publisher'] = $pub->field_osci_tk_publisher[$lang][0]['value'];
	}
	
	//Get the rights
	if (isset($pub->field_osci_tk_rights) && 
		isset($pub->field_osci_tk_rights[$lang]) &&
		strlen($pub->field_osci_tk_rights[$lang][0]['value']))
	{
		$metadata['rights'] = $pub->field_osci_tk_rights[$lang][0]['value'];
	}
	
	//add date element
	$date = gmdate("Y-m-d", $data['modified']) . 'T' . gmdate("H:i:s", $data['modified']) . 'Z';
	$metadata['date'] = $date;
	
	//add meta elements
	$metadata['meta'] = array(
		'dcterms:modified' => $date
		);
	
	return $metadata;
}

function _osci_tk_epub_navigation_generate_index($node, $forExport = False, $noCache = False)
{
	if ($node->type !== 'publication') return null;
	
	$output = '';
	
	// Check the cache
	if (!$noCache) {
		$cache_key = "osci_epub_index_{$node->nid}";    
		$output = _osci_tk_epub_check_cache($cache_key);
		if (!is_null($output)) {
			return $output;
		}
	}
	
	$list = '';
	if (isset($node->field_nodetree['und']) && is_array($node->field_nodetree['und'])) {
		foreach ($node->field_nodetree['und'] as $nodeTreeItem) {
			$section = node_load($nodeTreeItem['target_nid']);
			$url = _osci_tk_epub_node_content_url($section->nid);
			$list .= "<li><a href='{$url}'>{$section->title}</a></li>";
			
			// if section has figures, include them in index
			if (isset($section->field_figure['und']) && count($section->field_figure['und']) > 0) {
				for ($i=0; $i < count($section->field_figure['und']); $i++) {
					$figure = $section->field_figure['und'][$i];
					$url = _osci_tk_epub_node_figure_url($section->nid, $i);
					$list .= "<li><a href='{$url}'>{$section->title}: Fig. {$i}</a></li>";
				}
			}
		}
	}
	
	$output = "<nav epub:type='index' id='book-{$node->nid}-index'>";
	$output .= "<h1>Index</h1>"; // Optional header
	$output .= "<ol>{$list}</ol>"; // The only other element allowed as a child of <nav>
	$output .= "</nav>";

	if (!$noCache) {
		cache_set($cache_key, $output, 'cache');
	}
	
	return $output;
	
	
// 	$book = node_load($node->book['bid']);
// 	$data = array();
// 	$subtree = book_menu_subtree_data($book->book);
	
// 	_osci_tk_epub_index_build_data(array_pop($subtree), $data);
// 	ksort($data);
	
// 	if (!empty($data)) {

// 		// Not using templates for performance. Might consider an XML library.
// 		$output = "<nav epub:type='index' id='book-{$node->book['bid']}-index'>";
// 		$output .= "<h1>Index</h1>"; // Optional header
// 		$output .= "<ol>"; // The only other element allowed as a child of <nav>

// 		foreach($data as $item) {
// 			$url = $forExport ? $item['filename'] : $item['url'];
// 			$output .= "<li><a href='$url'>{$item['title']}</a></li>";      
// 		}

// 		$output .= "</ol></nav>";

// 		if (!$noCache) {
// 			cache_set($cache_key, $output, 'cache');              
// 		}
// 	}

// 	return $output;
}

function _osci_tk_epub_index_build_data($tree_node, &$data) {

	$nid = $tree_node['link']['nid'];
	$node = node_load($nid);
	
	if ($tree_node['link']['plid'] !== '0')
	{
		$contentData = array(
			'nid' => $nid,
			'filename' => _osci_tk_epub_node_content_filename($node),
			'url' => _osci_tk_epub_node_content_url($nid),
			'title' => $node->title
			);
		
		$data[$node->title] = $contentData;

		if (isset($node->field_figure['und'])) 
		{
			foreach($node->field_figure['und'] as $index => $figure) 
			{
				$figure['delta'] = $index;
				$figId = _osci_tk_figure_create_id($nid, $index);
				$title = $node->title . ': ' . _osci_tk_figure_process_number_template($figure);
				
				$data[$title] = array(
					'nid' => $nid,
					'index' => $index,
					'title' => $title,
					'filename' => $contentData['filename'] . '#' . $figId,
					'url' => $contentData['url'] . '#' . $figId,
					'id' => $figId
					);
			}
		}
		
		if (isset($node->field_footnote['und']))
		{
			foreach($node->field_footnote['und'] as $index => $footnote)
			{
				$fnId = 'fn-' . $nid . '-' . $index;
				$title = $node->title . ': Footnote ' . $index;
				$data[$title] = array(
					'nid' => $nid,
					'index' => $index,
					'id' => $fnId,
					'title' => $title,
					'filename' => $contentData['filename'] . '#' . $fnId,
					'url' => $contentData['url'] . '#' . $fnId,
					);
			}
		}
	}

	/*** Recurse if this node has children ***/
	if (!empty($tree_node['below'])) {
		foreach ($tree_node['below'] as $child) {    
			_osci_tk_epub_index_build_data($child, $data);   
		}
	}  

}

function _osci_tk_epub_get_book_css($node, $forExport = false)
{
	$book = null;
	$css = null;

	if (isset($node->book))
	{
		$book = node_load($node->book['bid']);
	}

	if ($book && isset($book->field_osci_tk_css) && $book->field_osci_tk_css['und'][0])
	{
		$css = _osci_tk_epub_asset_process_uri($book->field_osci_tk_css['und'][0]['uri'], $forExport);
	}

	return $css;
}

function osci_tk_epub_block_info()
{
	$blocks['epub_links'] = array(
		'info' => t('Epub Links'),
		'cache' => DRUPAL_CACHE_PER_PAGE
		);

	return $blocks;
}

function osci_tk_epub_block_view($delta = '')
{
	$block = array();
	switch($delta)
	{
		case 'epub_links':
		module_load_include('inc', 'osci_tk_epub', 'osci_tk_epub.publish');
		
		// show on node pages
		if (arg(0) == 'node') 
		{
			$nid = arg(1);
			if (is_numeric($nid)) {
				// It's node or nothing
				$node = node_load($nid);
				if (!$node) return $block;
				
				$links = array();
				
				// add the content document link for sections
				if ($node->type === 'section') {
					$links[] = l("Content Document", "api/epub/{$nid}/content.xhtml");
				}
				
				// add nav, toc, and package links for publications
				if ($node->type === 'publication') {
					$form = drupal_get_form('osci_tk_epub_publish_form', $nid);
					$links[] = l("Nav Document", "api/epub/{$nid}/nav.xhtml");
					$links[] = l("NCX Document", "api/epub/{$nid}/toc.ncx");
					$links[] = l("Package Document", "api/epub/{$nid}/package.opf");
					$links[] = drupal_render($form);
				}
				
				// block party
				$block['subject'] = t('ePub Links');
				$block['content'] = array(
					'#theme' => 'item_list',
					'#items' => $links
				);
			}
		}
		break;
	}
	return $block;
}

/**
 * Render the navigation document for the book corresponding to this node
 */
function osci_tk_epub_render_ncx_document($node)
{
	$dev = false;
	$output = _osci_tk_epub_generate_ncx_document($node, false, $dev);
	if ($dev) return $output;
	print $output;
	drupal_exit();  
}

function _osci_tk_epub_generate_ncx_document($node, $forExport = false, $noCache = false) 
{
	if ($node->type !== 'publication') return null;  

	// Check the cache
	if (!$noCache) {
		$cache_key = "osci_epub_ncx_{$node->nid}";    
		$output = _osci_tk_epub_check_cache($cache_key);
		if (!is_null($output)) {
			return $output;
		}
	}

	/***** Find all of the resources for this book *****/	
	$data = _osci_tk_epub_get_book_resources($node);
	$metadata = _osci_tk_epub_get_book_metadata($node, $data);

	$navMap = _osci_tk_epub_ncx_generate_navmap($data, $forExport);

	$output = theme("osci_tk_epub_ncx", array('navMap' => $navMap, 'metadata' => $metadata));
	
	if (!$noCache) {
		cache_set($cache_key, $output, 'cache');              
	}

	return $output;
}

/**
 * Render the ePub table of contents for the book of the given node
 */
function _osci_tk_epub_ncx_generate_navmap($data, $forExport = false)
{
	$output = null;

	if (!is_null($data['content_nids'])) {

		// Not using templates for performance. Might consider an XML library.
		$output = "<navMap>";
		$count = 0;
		foreach($data['content_nids'] as $content) {
			$count++;
			$url = $forExport ? $content['filename'] : $content['url'];
			$output .= '<navPoint id="section-' . $content['nid'] . '" playOrder="' . $count . '"><navLabel><text>' . $content['title'] . '</text></navLabel><content src="' . $url . '" /></navPoint>';      
		}

		$output .= "</navMap>";
	}

	return $output;
}

function _osci_tk_epub_get_revision_id($nid)
{
	$vid = null;

	if (isset($_GET['revision']) && is_numeric($_GET['revision']))
	{
		$time = $_GET['revision'];
		$vid = _osci_tk_utility_retrieve_revision_id_by_timestamp($nid, $time);
	}
	
	return $vid ? $vid: null;
}