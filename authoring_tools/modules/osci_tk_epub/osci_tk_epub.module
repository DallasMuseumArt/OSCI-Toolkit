<?php

function osci_tk_epub_menu()
{
	$items = array();
	
	$items['node/%/epub.xhtml'] = array(
		'title' => 'ePub',
		'page callback' => 'osci_tk_epub_render',
		'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_LOCAL_TASK
	);
	
	$items['node/%node/nav.xhtml'] = array(
		'title' => 'ePub Navigation Document',
		'page callback' => 'osci_tk_epub_render_navigation_document',
		'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_LOCAL_TASK
	);		
	
	$items['node/%node/package.opf'] = array(
		'title' => 'ePub Package Document',
		'page callback' => 'osci_tk_epub_render_package_document',
		'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_LOCAL_TASK
	);	
	
	$items['node/%node/%/figure.xhtml'] = array(
		'title' 			=> 'Figure content document',
		'page callback' 	=> 'osci_tk_epub_render_figure_content_document',
		'page arguments'	=> array(1, 2),
		'access arguments' 	=> array('access content'),
		'type' 				=> MENU_CALLBACK,
	);
	
	$items['node/%/epub/publish'] = array(	
		'title' => 'Publish ePub',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('osci_tk_epub_publish_form', 1),
		'access arguments' => array('access content'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'osci_tk_epub.publish.inc'
	);
	
	return $items;
}


/** 
 * hook_node_insert
 */
function osci_tk_epub_node_insert($node) {

  if (!isset($node->book) || (!$node->book['bid'])) return;
  
  // Pre-generate epub content
  _osci_tk_epub_generate_node_documents($node);
  
}


/**
 * hook_node_submit
 */
function osci_tk_epub_node_submit($node, $form, &$form_state)
{
  
  if (isset($node->book) && $node->book['bid']) {

    // Clearing the epub caches here will cause the output to be regenerated 
    // even if the node is being removed from the book
    cache_set("osci_epub_package_{$node->book['bid']}", null);     
    cache_set("osci_epub_toc_{$node->book['bid']}", null);  
    cache_set("osci_epub_content_{$node->nid}", null);
    
    if (isset($node->field_figure['und'])) {
      foreach ($node->field_figure['und'] as $index => $value) {
        cache_set("osci_epub_figure_{$node->nid}-$index", null);
      }      
    }    
    
  }
  
}


/** 
 * hook_node_update
 */
function osci_tk_epub_node_update($node) {

  if (!isset($node->book) || (!$node->book['bid'])) return;

  // Pre-generate epub content
  _osci_tk_epub_generate_node_documents($node);
  
}


function osci_tk_epub_theme($existing, $type, $theme, $path) {
	return array(
		'node__epub' => array(
			'template'	=> 'templates/node__epub',
			'variables' => array()
		),
		'epub_package' => array(
		    'variables' => array(
		        'pub_id' 		=> null,
		        'title' 		=> null,
		        'language' 		=> 'en',
		        'properties' 	=> array(),
		        'manifest' 		=> array(),
		        'spine' 		=> array()
		    ),
		    'template' => 'templates/epub_package',
			'file' => 'osci_tk_epub.templates.inc',
		),
		'epub_figure_content_document' => array(
			'template' 	=> 'templates/epub_figure_content_document',
			'variables' => array()
		),
		'epub_figure_link' => array(
			'template'	=> 'templates/epub_figure_link',
			'variables' => array(
				'section' 	=> NULL,
				'figure' 	=> NULL,
				'fig_index' => NULL
			)
		),
		'epub_footnote_link' => array(
			'template'	=> 'templates/epub_footnote_link',
			'variables' => array(
				'footnote_id' => NULL
			)
		),
		'osci_tk_footnote_epub' => array(
			'template' => 'templates/osci_tk_footnote_epub',
			'variables' => array(
		        'items' => array()
		     ),
		),
		'osci_tk_epub_mimetype' => array(
			'template' => 'templates/osci_tk_epub_mimetype',
			'variables' => array(),
		),
		'osci_tk_epub_container_xml' => array(
			'template' => 'templates/osci_tk_epub_container_xml',
			'variables' => array(
				'rootPath' => ''
			),
		),
		'osci_tk_epub_navigation' => array(
			'template' => 'templates/osci_tk_epub_navigation',
			'variables' => array(
				'content' => ''
			)
		)
	);
}

// register custom view mode 'epub'
function osci_tk_epub_entity_info_alter(&$entity_info) 
{
	foreach($entity_info as $type => $entity) 
	{
		$entity_info[$type]['view modes']['epub'] = array(
			'label' 			=> t('ePub'),
			'custom settings' 	=> TRUE,
		);
	}
}

/**
 * Implements hook_osci_tk_filter_TYPE_VIEWMODE
 * see osci_tk_filters.module 
 */
function osci_tk_epub_osci_tk_filter_figure_epub($text, $filter, $format) {
	return _osci_tk_epub_filter_figures($text);
}

function osci_tk_epub_osci_tk_filter_footnote_epub($text, $filter, $format) {
	return _osci_tk_epub_filter_footnotes($text);
}

function osci_tk_epub_render($nid)
{
	global $osci_tk_view_mode;
	$osci_tk_view_mode = 'epub';
	
	$dev = false;
	$node = node_load($nid);
	$output = _osci_tk_epub_generate_content_document($node, false, $dev);
	if ($dev) return $output;
	print $output;
	drupal_exit(); 
}

function _osci_tk_epub_generate_content_document($node, $forExport = false, $no_cache = false)
{
  
    /***** Check the cache *****/
    if (!$no_cache) {
      $cache_key = "osci_epub_content_{$node->nid}"; 
      $output = _osci_tk_epub_check_cache($cache_key);    
      if (!is_null($output)) {
        return $output; 
      }    
    }  
  
	$view = node_view($node, 'epub');
	
	$fields = element_children($view);
	foreach($fields as $key)
	{
		$element = $view[$key];
	
		switch($key)
		{
			case 'field_footnote':
				$view[$key]['#theme'] = 'osci_tk_footnote_epub';
				$i = 0;
				foreach($view[$key]['#items'] as $k => $v)
				{
					$view[$key]['#items'][$k]['fn_id'] = 'fn-' . $node->nid . '-' . $i;
					$i++;
				}
				break;
				
			case 'field_figure':
				$items = element_children($element);
				foreach($items as $delta)
				{  
					$view[$key][$delta]['#item']['export'] = $forExport;
				}
				
				break;
		}
	}
	
	$output = drupal_render($view);
	
    if (!$no_cache) {
      cache_set($cache_key, $output, 'cache');              
    }  
    
    return $output;	
    
}


/**
 * Render the navigation document for the book corresponding to this node
 */
function osci_tk_epub_render_navigation_document($node)
{

  $dev = false;
  $output = _osci_tk_epub_generate_navigation_document($node, false, $dev);
  if ($dev) return $output;
  print $output;
  drupal_exit();  
  
}


/**
 * Render the package document for the book corresponding to this node
 */
function osci_tk_epub_render_package_document($node)
{
  $dev = false;  
  $output = _osci_tk_epub_generate_package_document($node, false, $dev);
  if ($dev) return $output;
  
  //header('Content-type: application/oebps-package+xml');
  print $output;
  drupal_exit();
	
}


function osci_tk_epub_render_figure_content_document($node, $index) {

	if (!isset($node->field_figure) || !isset($node->field_figure['und'][$index])) return MENU_NOT_FOUND;
	if (!is_numeric($index)) return MENU_NOT_FOUND;

	$dev = false;  
	$output = _osci_tk_epub_generate_figure_document($node, $index, $dev);
	if ($dev) return $output;

	//header('Content-type: application/oebps-package+xml');
	print $output;
	drupal_exit();
}

function _osci_tk_epub_generate_figure_document($node, $index, $no_cache = false)
{
  
    /***** Check the cache *****/
    if (!$no_cache) {
      $cache_key = "osci_epub_figure_{$node->nid}-$index"; 
      $output = _osci_tk_epub_check_cache($cache_key);    
      if (!is_null($output)) {
        return $output; 
      }    
    }      
  
	$view = node_view($node, 'epub');
	// TODO: Handle the export case?	
	$content = drupal_render($view['field_figure'][$index]);
	
	// pass the prepared figure to the theme function which wraps it in 
	// a valid epub3 content document
	$themed_figure = theme('epub_figure_content_document', array('figure_markup' => $content));
	
    if (!$no_cache) {
      cache_set($cache_key, $themed_figure, 'cache');              
    }  	
	
	// output the themed figure
	return $themed_figure;
}

function osci_tk_epub_preprocess_epub_figure_link(&$vars) {
	$vars['base_url'] = url('', array('absolute' => TRUE));
}

function _osci_tk_epub_check_cache($cache_key) {
  
  // Check static variable    
  $output = &drupal_static($cache_key); 
  if (!is_null($output)) return $output;
  
  // Check cache
  if ($cache = cache_get($cache_key)) {
    $output = $cache->data; // Sets the static variable as well
    return $output;
  }
  
  return null;
  
}


function _osci_tk_epub_generate_navigation_document($node, $forExport = false, $no_cache = false) {
  
    // Generate table of contents
    $output = _osci_tk_epub_navigation_generate_book_toc($node, $forExport, $no_cache);
    
    // Generate other tables...
    $output .= _osci_tk_epub_navigation_generate_index($node, $forExport, $no_cache);
	
	$output = theme("osci_tk_epub_navigation", array('content' => $output));
	
    return $output;
  
}


/**
 * Generate all documents related to a node. Used to pre-load the cache.
 */
function _osci_tk_epub_generate_node_documents($node) {
  
    _osci_tk_epub_generate_navigation_document($node);
    _osci_tk_epub_generate_package_document($node);  
    _osci_tk_epub_generate_content_document($node);  
  
    /*
     * TODO: resolve _osci_tk_conservation_get_conservation_html() being undefined
    if (isset($node->field_figure['und'])) {
        foreach ($node->field_figure['und'] as $index => $value) {
            _osci_tk_epub_generate_figure_document($node, $index);
        }      
    } 
    */       
    
}


function _osci_tk_epub_generate_package_document($node, $forExport = false, $no_cache = false) {
      // Find the corresponding book for this node
    if (!isset($node->book)) return null;    
    
    /***** Check the cache *****/
    if (!$no_cache) {
      $cache_key = "osci_epub_package_{$node->book['bid']}"; 
      $output = _osci_tk_epub_check_cache($cache_key);    
      if (!is_null($output)) {
        return $output; 
      }    
    }
    
    $book = node_load($node->book['bid']);
	
    /***** Find all of the resources for this book *****/	
	$data = _osci_tk_epub_get_book_resources($book);

	$metadata = _osci_tk_epub_get_book_metadata($book, $data);
	
    // Should this data structure be passed through _osci_tk_epub_package_build_data instead?
    $arguments = array(
		'metadata' => $metadata,
        'manifest' => array(),
        'spine' => array()
    );
    
    /***** Build the manifest and spine *****/
    
    // Navigation document
    $arguments['manifest'][] = array(
      'id' => 'nav',
      'href' => $forExport ? 'nav.xhtml' : url("node/{$node->book['bid']}/nav.xhtml", array('absolute' => true)),
      'media-type' => 'application/xhtml+xml',
      'properties' => 'nav'
    );    

	//Cover Image
	if (isset($book->field_osci_tk_cover_image) && $book->field_osci_tk_cover_image['und'][0])
	{
		$arguments['manifest'][] = array(
			'id' => 'cover-image',
			'href' => _osci_tk_epub_asset_process_uri($book->field_osci_tk_cover_image['und'][0]['uri'], $forExport),
			'media-type' => $book->field_osci_tk_cover_image['und'][0]['filemime'],
			'properties' => 'cover-image'
		);
	}
	
	//CSS
	if (isset($book->field_osci_tk_css) && $book->field_osci_tk_css['und'][0])
	{
		$arguments['manifest'][] = array(
			'id' => 'css',
			'href' => _osci_tk_epub_asset_process_uri($book->field_osci_tk_css['und'][0]['uri'], $forExport),
			'media-type' => 'text/css'
		);
	}

    // Content documents go into the manifest and the spine
    foreach($data['content_nids'] as $content) {
      $id = 'section-' . $content['nid'];
      $arguments['manifest'][] = array(
        'id' => $id,
        'href' => $forExport ? $content['filename'] : $content['url'],
        'media-type' => 'application/xhtml+xml',      
      );      
      $arguments['spine'][] = array(
        'idref' => $id,
      );
    }
    
	$addedResources = array();
    // Add figure resources to the manifest
    foreach($data['figures'] as $figure) {      
      
      if (isset($figure['content-doc'])) {
        $arguments['manifest'][] = array(
          'id' => "figure-{$figure['nid']}-{$figure['index']}",
          'href' => $forExport ? $figure['content-doc']['filename'] : $figure['content-doc']['url'],
          'media-type' => $figure['content-doc']['media-type'],        
        );
      }
      
      foreach($figure['resources'] as $index => $item) {
		$resourceHref = _osci_tk_epub_asset_process_uri($item['uri'], $forExport);
		
		//if the resource has already been added, do not add again
		if (in_array($resourceHref, $addedResources)) 
		{
		  continue;
		}
		
		$addedResources[] = $resourceHref;
		
        $arguments['manifest'][] = array(
          'id' => "figure-resource-" . count($addedResources),
          'href' => $resourceHref,
          'media-type' => $item['media-type'],
        );      
      }
      
    }
    
    // TODO: Additional stuff for the manifest (figures, etc.)    
    
    $output = theme('epub_package', $arguments);
            
    if (!$no_cache) {
      cache_set($cache_key, $output, 'cache');              
    }  
    
    return $output;
  
}


/**
 * Recursively build up the toc metadata for the given book node's subtree
 */
function _osci_tk_epub_navigation_build_toc($tree_node) {
  
  $result = array();

  /*** Build metadata for this node ***/
  if (isset($tree_node['link']['nid'])) {
      $nid = $tree_node['link']['nid'];
  } else {
      $nid = substr($tree_node['link']['href'], strrpos($tree_node['link']['href'], '/') + 1);
  }  
  
  $nextPage = null;
  $prevPage = null;
  $parentPage = null;
  
  if ($tree_node['link']['mlid']) {
      if ($prev = book_prev($tree_node['link'])) {
          $prevPage = substr($prev['href'], strrpos($prev['href'], '/') + 1);
          //$nids[] = $prevPage;
      }
      if ($tree_node['link']['plid'] && $parent = book_link_load($tree_node['link']['plid'])) {
          $parentPage = substr($parent['href'], strrpos($parent['href'], '/') + 1);
          //$nids[] = $parentPage;
      }
      if ($next = book_next($tree_node['link'])) {
          $nextPage = substr($next['href'], strrpos($next['href'], '/') + 1);
          //$nids[] = $nextPage;
      }
  }   

  $result['data'] = array(  
	'nid'      => $nid,
  	'mlid'     => $tree_node['link']['mlid'],
  	'title'    => $tree_node['link']['title'],  
	'url'      => _osci_tk_epub_node_content_url($nid),
	'filename' => _osci_tk_epub_node_content_filename(node_load($nid)),
    'next'     => $nextPage,
    'prev'     => $prevPage,
    'parent'   => $parentPage,
    'length'   => 0
  );

  if (isset($tree_node['link']['bid'])) {
    $result['data']['bid'] = $tree_node['link']['bid'];
  }
  
  /*** Load additional info from the node ***/
  $result['data'] = array_merge($result['data'], _osci_tk_epub_navigation_node_toc_data($nid));
  
  $result['data']['subtree_length'] = $result['data']['length'];    
  
  /*** Recurse if this node has children ***/
  if (!empty($tree_node['below'])) {
      $result['children'] = array();
      foreach ($tree_node['below'] as $child) {    
        $child_data = _osci_tk_epub_navigation_build_toc($child);   
        $result['children'][] =  $child_data;
        $result['data']['subtree_length'] += $child_data['data']['subtree_length'];
      }
  }  
  
  return $result;  
  
}


/**
 * Gather table of contents data for the given node
 */
function _osci_tk_epub_navigation_node_toc_data($nid) {
  
  $data = array();
  
  $node = node_load($nid);
  
  $data['timestamp'] = $node->changed;  

  if (!empty($node->field_osci_tk_content_length)) {        
    $data['length'] = $node->field_osci_tk_content_length['und'][0]['value'];
  }  

  if (isset($node->field_osci_tk_plate_image['und']) && $node->field_osci_tk_plate_image['und'][0]['nid']) {
    $imageNode = node_load($node->field_osci_tk_plate_image['und'][0]['nid']);
    $fullImageUrl = file_create_url($imageNode->field_image['und'][0]['uri']);
    $thumbnail165Url = image_style_url('osci_tk_default', $imageNode->field_image['und'][0]['uri']);
    $thumbnail100Url = image_style_url('osci_tk_default', $imageNode->field_image['und'][0]['uri']);

    $data['plate_image'] = array(
      'full_image_url' => $fullImageUrl,
      'thumbnail_165w_url' => $thumbnail165Url,
      'thumbnail_100w_url' => $thumbnail100Url
    );
  }    
  
  return $data;
  
}


/**
 * Render the ePub table of contents for the book of the given node
 */
function _osci_tk_epub_navigation_generate_book_toc($node, $forExport = false, $no_cache = false)
{
  
  if (!isset($node->book)) return null;  
  
  // Check the cache
  if (!$no_cache) {
    $cache_key = "osci_epub_toc_{$node->book['bid']}";    
    $output = _osci_tk_epub_check_cache($cache_key);
    if (!is_null($output)) {
      return $output;
    }
  }

  // Build the toc for the book
  $toc = null;
  $book = node_load($node->book['bid']);  
  $subtree = book_menu_subtree_data($book->book);
  // There should only be one node at the top level  
  $toc = _osci_tk_epub_navigation_build_toc(array_pop($subtree));

  $output = null;
  
  if (!is_null($toc)) {
          
    // Not using templates for performance. Might consider an XML library.
    $output = "<nav epub:type='toc' id='book-{$node->book['bid']}-toc'>";
    $output .= "<h1>Table of Contents</h1>"; // Optional header
    $output .= "<ol>"; // The only other element allowed as a child of <nav>
    
    /* 
     * The order of li elements contained within the toc nav element must match the order of 
     * the targeted elements within each targeted EPUB Content Document, and must also follow 
     * the order of Content Documents in the Publication spine.
     */
    
    $attr_fields = array('nid', 'mlid', 'length', 'subtree_length', 'editor', 'timestamp');
  
    foreach($toc['children'] as $child) {
      $output .= _osci_tk_epub_navigation_generate_toc_subtree($child, $attr_fields, $forExport);
    }
      
    $output .= "</ol></nav>";
    
	//$output = theme("osci_tk_epub_navigation", array('content' => $output));
	
    if (!$no_cache) {
      cache_set($cache_key, $output, 'cache');              
    }
    
  }

  return $output;
    
}


/**
 * Render the ePub table of contents for a node's book subtree
 */
function _osci_tk_epub_navigation_generate_toc_subtree($tree_node, $attr_fields = array(), $forExport = false) {

  // Export data fields into html attributes
  $attr_data = array();
  foreach ($attr_fields as $field) {
    if (isset($tree_node['data'][$field])) {
      $attr_data[]= "data-$field='{$tree_node['data'][$field]}'";
    }
    $data_str = count($attr_data) ? join(' ', $attr_data) : '';    
  }    
    
  // <a> points to the target within the EPUB ContentDocument
  $url = $forExport ? $tree_node['data']['filename'] : $tree_node['data']['url'];
  $content = "<a $data_str href='$url'>{$tree_node['data']['title']}</a>";      

  if (empty($tree_node['children'])) {
    return "<li>$content</li>";
  } 

  $children = '';
  foreach ($tree_node['children'] as $child) {
    $children .= _osci_tk_epub_navigation_generate_toc_subtree($child, $attr_fields);    
  }
  
  // Build children    
  return "<li>$content<ol>$children</ol></li>";    
  
}


/**
 * Recursively collects data to build the package document
 */
function _osci_tk_epub_package_build_data($tree_node, &$data) {
  
    $nid = $tree_node['link']['nid'];
    $node = node_load($nid);

    if ($node->changed > $data['modified']) $data['modified'] = $node->changed;
    
	if ($tree_node['link']['plid'] !== '0')
	{
		$data['content_nids'][] = array(
			'nid' => $nid,
			'filename' => _osci_tk_epub_node_content_filename($node),
			'url' => _osci_tk_epub_node_content_url($nid)
		);

		if (isset($node->field_figure['und'])) {

			foreach($node->field_figure['und'] as $index => $figure) {

				// Invoke the hook to get information about resources for this figure        
				$resources = module_invoke_all('osci_tk_figure_resources', $figure);        

				$figure_data = array(
					'nid' => $nid,
					'index' => $index,
					'resources' => $resources['items'],
				);                

				// If the figure has a media type for the content document, add it as a resource
				// Otherwise, a content document is assumed not to be required for the figure
				if (isset($resources['content_doc_media_type'])) {
					$figure_data['content-doc'] = array(
						'media-type' => $resources['content_doc_media_type'],
						'filename' => _osci_tk_epub_node_figure_filename($node, $index),
						'url' => _osci_tk_epub_node_figure_url($nid, $index)          
					);          
				}         

				$data['figures'][] = $figure_data;

			}
		}
	}
  
    /*** Recurse if this node has children ***/
    if (!empty($tree_node['below'])) {
        foreach ($tree_node['below'] as $child) {    
            _osci_tk_epub_package_build_data($child, $data);   
        }
    }  
  
}

/**
 * Replace figure links with object markup
 */
function _osci_tk_epub_filter_figures($text) {
	$filtered = $text;
	$regex = '/\[figure:fig-(\d+)-(\d+)\]/i';
	$matches = array();
	preg_match_all($regex, $text, $matches);
	foreach ($matches[0] as $index => $match) {
		$section_id = $matches[1][$index];
		$fig_index = $matches[2][$index];
		$section_node = node_load($section_id);
		if ($section_node) {
			if (isset($section_node->field_figure['und'][$fig_index])) {
				$figure = $section_node->field_figure['und'][$fig_index];
				$figure['delta'] = $fig_index;
				$markup = theme('epub_figure_link', array(
					'section' 	=> $section_node, 
					'figure' 	=> $section_node->field_figure['und'][$fig_index],
					'fig_index' => $fig_index,
					'fig_id'    => _osci_tk_figure_create_id($section_id, $fig_index),
					'fig_text'  => _osci_tk_figure_process_number_template($figure)
				));
				$filtered = str_replace($match, $markup, $filtered);
			}
		}
	}
	return $filtered;
}

function _osci_tk_epub_filter_footnotes($text) {
	$filtered = $text;
	$regex = '/\[footnote:(fn-\d+-(\d+))\]/i';
	$matches = array();
	preg_match_all($regex, $text, $matches);
	foreach ($matches[0] as $index => $match) {
		$replace = theme('epub_footnote_link', array(
			'footnote_id' 		=> $matches[1][$index],
			'footnote_index' 	=> $matches[2][$index]
		));
		$filtered = str_replace($match, $replace, $filtered);
	}
	return $filtered;
}

function _osci_tk_epub_get_book_resources(&$book)
{
	/***** Find all of the resources for this book *****/
    $data = array(
      'modified' => 0,
      'content_nids' => array(),
      'figures' => array()
    );
    
    $subtree = book_menu_subtree_data($book->book);
    // There should only be one node at the top level
    _osci_tk_epub_package_build_data(array_pop($subtree), $data);

	return $data;
}

function _osci_tk_clean_filename_string($string)
{
	return preg_replace("[^A-Za-z0-9\-]", "", str_replace(' ', '-', strtolower(trim($string))));
}

function _osci_tk_epub_node_content_filename(&$node)
{
	return _osci_tk_clean_filename_string($node->title) . '.xhtml';
}

function _osci_tk_epub_node_figure_filename(&$node, $index)
{
	return 'figure-' . _osci_tk_clean_filename_string($node->title) . '-' . $index . '.xhtml';
}

function _osci_tk_epub_node_content_url($nid)
{
	return url("node/{$nid}/epub.xhtml", array('absolute' => true));
}

function _osci_tk_epub_node_figure_url($nid, $index)
{
	return url("node/{$nid}/{$index}/figure.xhtml", array('absolute' => true));
}

function _osci_tk_epub_asset_process_uri($uri, $forExport = false)
{
	if ($forExport)
	{
		return str_replace(file_uri_scheme($uri) . '://', "resources/", $uri);
	} 
	else 
	{
		return file_create_url($uri);
	}
}

function _osci_tk_epub_get_book_metadata(&$book, &$data)
{
	$metadata = array();
	
	if ($book->type !== 'cover_section')
	{
		return $metadata;
	}
	
	$lang = $book->language;
	
	//get the title
	$metadata['title'] = $book->title;
	
	//get any subtitles
	if (isset($book->field_osci_tk_subtitle) && isset($book->field_osci_tk_subtitle[$lang]))
	{
		$metadata['subtitle'] = array();
		foreach($book->field_osci_tk_subtitle[$lang] as $k => $v)
		{			
			$metadata['subtitle'][] = $v['value'];
		}
	}
	
	//Get the identifier
	if (isset($book->field_osci_tk_identifier) && 
		isset($book->field_osci_tk_identifier[$lang]) &&
		strlen($book->field_osci_tk_identifier[$lang][0]['value']))
	{
		$metadata['identifier'] = $book->field_osci_tk_identifier[$lang][0]['value'];
	}
	
	//Get the creator
	if (isset($book->field_osci_tk_creator) && isset($book->field_osci_tk_creator[$lang]))
	{
		$metadata['creator'] = array();
		foreach($book->field_osci_tk_creator[$lang] as $k => $v)
		{			
			$metadata['creator'][] = $v['value'];
		}
	}
	
	//Get the description
	if (isset($book->field_osci_tk_description) && 
		isset($book->field_osci_tk_description[$lang]) &&
		strlen($book->field_osci_tk_description[$lang][0]['value']))
	{
		$metadata['description'] = $book->field_osci_tk_description[$lang][0]['value'];
	}
	
	//Get the publisher
	if (isset($book->field_osci_tk_publisher) && 
		isset($book->field_osci_tk_publisher[$lang]) &&
		strlen($book->field_osci_tk_publisher[$lang][0]['value']))
	{
		$metadata['publisher'] = $book->field_osci_tk_publisher[$lang][0]['value'];
	}
	
	//Get the rights
	if (isset($book->field_osci_tk_rights) && 
		isset($book->field_osci_tk_rights[$lang]) &&
		strlen($book->field_osci_tk_rights[$lang][0]['value']))
	{
		$metadata['rights'] = $book->field_osci_tk_rights[$lang][0]['value'];
	}
	
	//add date element
	$date = gmdate("Y-m-d", $data['modified']) . 'T' . gmdate("H:i:s", $data['modified']) . 'Z';
	$metadata['date'] = $date;
	
	//add meta elements
	$metadata['meta'] = array(
		'dcterms:modified' => $date
	);
	
	return $metadata;
}

function _osci_tk_epub_navigation_generate_index($node, $forExport, $noCache)
{
	$output = '';
	
	// Check the cache
	if (!$noCache) {
		$cache_key = "osci_epub_index_{$node->book['bid']}";    
		$output = _osci_tk_epub_check_cache($cache_key);
		if (!is_null($output)) {
			return $output;
		}
	}
	
	$book = node_load($node->book['bid']);
	$data = array();
    $subtree = book_menu_subtree_data($book->book);
	
	_osci_tk_epub_index_build_data(array_pop($subtree), $data);
	ksort($data);
	
	if (!empty($data)) {
          
		// Not using templates for performance. Might consider an XML library.
		$output = "<nav epub:type='index' id='book-{$node->book['bid']}-index'>";
		$output .= "<h1>Index</h1>"; // Optional header
		$output .= "<ol>"; // The only other element allowed as a child of <nav>

		foreach($data as $item) {
			$url = $forExport ? $item['filename'] : $item['url'];
			$output .= "<li><a href='$url'>{$item['title']}</a></li>";      
		}

		$output .= "</ol></nav>";

		if (!$noCache) {
			cache_set($cache_key, $output, 'cache');              
		}
	}
		
	return $output;
}

function _osci_tk_epub_index_build_data($tree_node, &$data) {
  
    $nid = $tree_node['link']['nid'];
    $node = node_load($nid);
	
	if ($tree_node['link']['plid'] !== '0')
	{
		$contentData = array(
			'nid' => $nid,
			'filename' => _osci_tk_epub_node_content_filename($node),
			'url' => _osci_tk_epub_node_content_url($nid),
			'title' => $node->title
		);
		
		$data[$node->title] = $contentData;

		if (isset($node->field_figure['und'])) 
		{
			foreach($node->field_figure['und'] as $index => $figure) 
			{
				$figure['delta'] = $index;
				$figId = _osci_tk_figure_create_id($nid, $index);
				$title = $node->title . ': ' . _osci_tk_figure_process_number_template($figure);
				
				$data[$title] = array(
					'nid' => $nid,
					'index' => $index,
					'title' => $title,
					'filename' => $contentData['filename'] . '#' . $figId,
					'url' => $contentData['url'] . '#' . $figId,
					'id' => $figId
				);
			}
		}
		
		if (isset($node->field_footnote['und']))
		{
			foreach($node->field_footnote['und'] as $index => $footnote)
			{
				$fnId = 'fn-' . $nid . '-' . $index;
				$title = $node->title . ': Footnote ' . $index;
				$data[$title] = array(
					'nid' => $nid,
					'index' => $index,
					'id' => $fnId,
					'title' => $title,
					'filename' => $contentData['filename'] . '#' . $fnId,
					'url' => $contentData['url'] . '#' . $fnId,
				);
			}
		}
	}
  
    /*** Recurse if this node has children ***/
    if (!empty($tree_node['below'])) {
        foreach ($tree_node['below'] as $child) {    
            _osci_tk_epub_index_build_data($child, $data);   
        }
    }  
  
}