<?php

/**
 * Implements hook_menu()
 */
function osci_tk_search_menu() {
	$items = array();
	$items['api/search'] = array(
		'title' 			=> t('Search'),
		'page callback' 	=> 'osci_tk_search_query',
		'type' 				=> MENU_CALLBACK,
		'access arguments'  => array('access content'),
	);
	$items['api/opensearch'] = array(
		'title' 			=> t('Search'),
		'page callback' 	=> 'osci_tk_search_opensearch_query',
		'type' 				=> MENU_CALLBACK,
		'access arguments'  => array('access content'),
	);
	$items['admin/config/search/opensearch'] = array(
		'title' 			=> t('Open Search Settings'),
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('osci_tk_search_opensearch'),
		'access arguments' 	=> array('administer site configuration'),
		'file' 				=> 'osci_tk_search.admin.inc',
	);
	$items['opensearch/document'] = array(
		'title'				=> t('OpenSearch Document'),
		'page callback'		=> 'osci_tk_search_display_opensearch_document',
		'access arguments'  => array('access content'),
		'type'				=> MENU_CALLBACK,
	);
	return $items;
}

/**
 * Implements hook_theme().
 */
function osci_tk_search_theme($existing, $type, $theme, $path) {
	return array(
		'opensearch_description' => array(
			'variables' => array(),
			'template' 	=> 'templates/opensearch-description',
			'file' 		=> 'osci_tk_search.templates.inc'
		),
		'opensearch_results' => array(
			'variables' => array(
				'response' => NULL,
			),
			'template'	=> 'templates/opensearch-results',
			'file'		=> 'osci_tk_search.templates.inc'
		),
	);
}

/**
 * Generate basic search results as JSON
 */
function osci_tk_search_query() {
	$response = osci_tk_search_do_query();
	print json_encode($response);
}

/**
 * Generates open search results 
 */
function osci_tk_search_opensearch_query() {
	$response = osci_tk_search_do_query();
	print theme('opensearch_results', array('response' => $response));
}

/**
 * Perform primary query
 * @return Object
 */
function osci_tk_search_do_query() {
	// setup query parameters
	$params['q']	= arg(2);
	$params['fl']	= '*';
	$solrsort		= '';

	// retrieve the filters
	$filters = array();
	$raw_filters	= isset($_GET['filters']) ? explode(' ', $_GET['filters']) : array();
	foreach($raw_filters as $filter) {
		$filter_array = explode(':', $filter);
		$filters[$filter_array[0]] = $filter_array[1];
	}
	// create query object
	$query = apachesolr_drupal_query('oscitk', $params, $solrsort);
	// set page
	$query->page = pager_find_page();

	// filter by search type
	/*
	if(isset($filters['type']) && $filters['type'] == 'notes') {
		$query->addFilter('_query_', '"bundle:note"');
	} else { 
		// default to content search
		$query->addFilter('_query_', '"is_book_bid:[1 TO *] AND -bundle:note"');
	}
	*/

	// add content boost parameters to the query
	apachesolr_search_add_boost_params($query);
	// execute query
	list($final_query, $response) = apachesolr_do_query($query, $query->page);
	return $response->response;
}

/**
 * Display the OpenSearch document
 */
function osci_tk_search_display_opensearch_document() {
	print theme('opensearch_description');
}

/**
 * Implements hook_apachesolr_index_document_build()
 */
function osci_tk_search_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
	// only add items that are viewable by the reader
	if(isset($entity->book)) {
		_osci_tk_search_get_path_hierarchy($entity->book, $document);
		_osci_tk_search_create_paragraph_documents($entity, $document, $env_id);
		if(isset($entity->field_footnote)) {
			_osci_tk_search_create_footnote_documents($entity, $document, $env_id);
		}
		if(isset($entity->field_figure)) {
			_osci_tk_search_create_figure_documents($entity, $document, $env_id);
		}
	}
}

/**
 * Generate content path
 * @param  Object             $book     The book object
 * @param  ApacheSolrDocument $document The solr document
 */
function _osci_tk_search_get_path_hierarchy($book, ApacheSolrDocument $document) {
	// retrieve the books menu tree
	$subtree_data = array_pop(book_menu_subtree_data($book));
	// generate the content path tree
	$tree_hierarchy = array_reverse(_osci_tk_search_generate_content_path_tree($subtree_data['link']));
	
	$current_path = '';
	foreach($tree_hierarchy as $key => $path) {
		$current_path .= '/' . $path;
		// add paths to the solr document
		$document->addField('sm_path_hierarchy', $current_path);
		$document->addField('sm_path_hierarchy_depth', $key . $current_path);
	}
}

/**
 * Generate the content path hierachy
 * @param  object $link         The current link object
 * @param  array $content_path An array of paths
 * @return array
 */
function _osci_tk_search_generate_content_path_tree($link, $content_path = null) {
	// set initial path
	if(!$content_path) {
		$content_path[$link['depth'] - 1] = _osci_tk_search_clean_title($link['title']);
	}
	// check to see if the section is already at the root
	if($link['depth'] <= 1) return $content_path;

	// load the book link
	$parent_link = book_link_load($link['plid']);
	$content_path[$parent_link['depth'] - 1] = _osci_tk_search_clean_title($parent_link['title']);
	// continue to obtain the parent links
	if($parent_link['depth'] > 1) {
		$content_path = _osci_tk_search_generate_content_path_tree($parent_link, $content_path);
	}
	return $content_path;
}

/**
 * Creates new documents at the paragraph level
 * @param  object $entity     The parent entity
 * @param  object $entity_doc The parent entity solr document
 * @param  string $env_id     Solr environment id
 */
function _osci_tk_search_create_paragraph_documents($entity, $entity_doc, $env_id) {
	$documents = array();
	$paragraphs = _osci_tk_search_get_section_paragraphs($entity);

	// setup documents for each paragraph
	foreach($paragraphs as $delta => $paragraph) {
		// strip container
		$content = str_replace(array('<p>', '</p>'), '', $paragraph);

		$pid = _osci_tk_search_create_paragraph_id($entity->nid, $delta);

		$document = clone $entity_doc;
		$document->id = $document->id . '/' . $pid;
		$document->url = $document->url . '/' . $pid;
		$document->path = $document->path . '/' . $pid;
		$document->content = trim($content);
		$document->teaser = truncate_utf8($document->content, 300, TRUE);
		$document->is_paragraph_id = $pid;
		$document->bundle = 'paragraph';
		$documents[] = $document;
	}
	// send to solr
	apachesolr_index_send_to_solr($env_id, $documents);
}

/**
 * Retrieve a section's paragraphs
 * @param  object $entity The entity node
 * @return array
 */
function _osci_tk_search_get_section_paragraphs($entity) {
	// retrieve the node in 'epub' view
	$view = node_view($entity, 'epub');
	
	// remove figures and footnotes from display
	unset($view['field_figure']);
	unset($view['field_footnote']);
	
	// render the content
	$content = render($view);
	
	// retrieve all content in paragraph tags
	preg_match_all('/<p>(.*?)<\/p>/', $content, $matches);

	return $matches[0];
}

/**
 * Creates new documents for an entitys footnotes
 * @param  object $entity     The parent entity
 * @param  object $entity_doc The parent entity solr document
 * @param  string $env_id     Solr environment id
 */
function _osci_tk_search_create_footnote_documents($entity, $entity_doc, $env_id) {
	$documents = array();

	// setup documents for each footnote
	foreach($entity->field_footnote[$entity->language] as $delta => $item) {
		$fid = 'footnote-' . $delta;

		$document = clone $entity_doc;
		$document->id = $document->id . '/' . $fid;
		$document->url = $document->url . '/' . $fid;
		$document->path = $document->path . '/' . $fid;
		$document->content = trim($item['value']);
		$document->teaser = truncate_utf8($document->content, 300, TRUE);
		$document->ss_footnote_id = _osci_tk_search_create_footnote_id($entity->nid, $delta);
		$document->bundle = 'footnote';
		$documents[] = $document;
	}
	// send to solr
	apachesolr_index_send_to_solr($env_id, $documents);
}

/**
 * Creates new documents for a entitys figures
 * @param  object $entity     The parent entity
 * @param  object $entity_doc The parent entity solr document
 * @param  string $env_id     Solr environment id
 */
function _osci_tk_search_create_figure_documents($entity, $entity_doc, $env_id) {
	$documents = array();

	// setup documents for each figure
	foreach($entity->field_figure[$entity->language] as $delta => $item) {
		$fid = 'figure-' . $delta;

		$document = clone $entity_doc;
		$document->id = $document->id . '/' . $fid;
		$document->url = $document->url . '/' . $fid;
		$document->path = $document->path . '/' . $fid;
		$document->content = trim($item['caption']);
		$document->teaser = truncate_utf8($document->content, 300, TRUE);
		$document->ss_figure_id = _osci_tk_figure_create_id($entity->nid, $delta);
		$document->bundle = 'figure';
		$documents[] = $document;
	}
	// send to solr
	apachesolr_index_send_to_solr($env_id, $documents);
}

/**
 * Helper function for generating paragraph ids
 * @param  int $nid   The node id
 * @param  int $delta The paragraph position
 * @return string
 */
function _osci_tk_search_create_paragraph_id($nid, $delta) {
	return 'p-' . $nid . '-' . $delta;
}

/**
 * Helper function for generating the footnote id
 * @param  int $nid   The node id
 * @param  int $delta The position in the field array
 * @return string
 */
function _osci_tk_search_create_footnote_id($nid, $delta) {
	return 'fn-' . $nid . '-' . $delta;
}

/**
 * Replaces title spacing with hyphens
 * @param  string $title Book/section title
 * @return string
 */
function _osci_tk_search_clean_title($title) {
	return str_replace(' ', '-', $title);
}