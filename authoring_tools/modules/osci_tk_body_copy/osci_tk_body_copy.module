<?php

function osci_tk_body_copy_init() {
	$baseUrl = url("", array('absolute' => TRUE));
	drupal_add_js(array('baseUrl' => $baseUrl), 'setting');
	drupal_add_library('system', 'ui.dialog');
}

function osci_tk_body_copy_menu()
{
    $items = array();

    $items['ajax/figure'] = array(
        'title'             => 'Figure search',
        'page callback'     => 'osci_tk_body_copy_figure_reference',
        'access arguments'  => array('access content'),
        'type'              => MENU_CALLBACK,
    );
    
    $items['ajax/figurepreview/%'] = array(
        'title'             => 'Figure preview',
        'page callback'     => 'osci_tk_body_copy_figure_preview',
    	'page arguments'	=> array(2),
        'access arguments'  => array('access content'),
        'type'              => MENU_CALLBACK,
    );
    
   	$items['ajax/figurethumb/save'] = array(
        'title'             => 'Save Figure Thumbnail',
        'page callback'     => 'osci_tk_body_copy_figure_thumb_save',
        'access arguments'  => array('access content'),
        'type'              => MENU_CALLBACK,
    );

    return $items;
}

function osci_tk_body_copy_theme()
{
    return array(
        'body_copy_footnote' => array(
            'template'  => 'templates/osci_tk_body_copy_footnote',
            'variables' => array(
                'fnId'      => null,
                'fnCopy'    => null
            )
        ),
        'body_copy_figure' => array(
            'template'  => 'templates/osci_tk_body_copy_figure',
            'file'      => 'osci_tk_body_copy.templates.inc',
            'variables' => array(
                'figure'            => array(),
                'body_copy_format'  => null,
            )
        )
    );
}

function osci_tk_body_copy_field_info()
{
    return array(
        'osci_tk_body_copy' => array(
            'label'             => t('Body Copy'),
            'description'       => t('Includes text area for body copy and multi-value field for footnotes & figures'),
            'default_widget'    => 'osci_tk_body_copy_widget',
            'default_formatter' => 'osci_tk_body_copy_formatter'
        )
    );
}

function osci_tk_body_copy_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items)
{
    if ($field['type'] === 'osci_tk_body_copy') {
        $items[0]['footnote_index']     = (int)$items[0]['footnotes']['footnote_index'];
        $items[0]['body_copy_format']   = $items[0]['body_copy']['format'];
        $items[0]['body_copy']          = trim($items[0]['body_copy']['value']);
        $items[0]['figure_index']       = (int)$items[0]['figures']['figure_index'];

        $finalFootnotes = array();
        if (is_array($_POST[$field['field_name']]['und'][0]['footnotes'])) {
            $footnotes = $_POST[$field['field_name']]['und'][0]['footnotes'];
            foreach($footnotes as $id => $footnote) {
                $uid = substr($field['field_name'], 6) . '_fn_' . $entity->nid . '_' . $id;
                if (empty($footnote) || $id == 'footnote_index' || $id == 'footnote-blank') {
                    continue;
                }
                $finalFootnotes[$uid] = $footnote;
            }
        }
        $items[0]['footnotes'] = serialize($finalFootnotes);

        $finalFigures = array();
        if (is_array($_POST[$field['field_name']]['und'][0]['figures'])) {
            $figures = $_POST[$field['field_name']]['und'][0]['figures'];
            foreach($figures as $id => $figure) {
                $uid = substr($field['field_name'], 6) . '_fig_' . $entity->nid . '_' . $id;
                if (empty($figure['figure_reference']) || $id == 'figure_index' || $id == 'figure-blank') {
                    continue;
                }
                
                $opts = json_decode($figure['figure_options']);
                if (isset($opts->previewUrl)) {
                	unset($opts->previewUrl);
                }
                $figure['figure_options'] = json_encode($opts);
                
                $finalFigures[$uid] = $figure;
            }
        }
        $items[0]['figures'] = serialize($finalFigures);
    }
}

function osci_tk_body_copy_field_is_empty($item, $field)
{
    $return = false;

    if (empty($item['body_copy'])) {
        $return = true;
    }

    return $return;
}

/***********************************************************************
 *  Field Type API: Formatter
 **********************************************************************/

function osci_tk_body_copy_field_formatter_info()
{
    return array(
        'osci_tk_body_copy_formatter' => array(
            'label' => t('Default'),
            'field types' => array('osci_tk_body_copy')
        )
    );
}

function osci_tk_body_copy_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items)
{
    if ($field['type'] == 'osci_tk_body_copy') {
        foreach($items as $nid => $fields) {
            foreach($fields as $delta => $item) {
                if (isset($item['footnotes'])) {
                    $items[$nid][$delta]['footnotes'] = unserialize($item['footnotes']);
                }

                if (isset($item['figures'])) {
                    $figures = unserialize($item['figures']);

                    foreach($figures as $id => $figure) {
                        $figures[$id]['id'] = $id;
                        $figures[$id]['format'] = $item['body_copy_format'];
                    }
                    $items[$nid][$delta]['figures'] = $figures;
                }
            }
        }
    }
}

function osci_tk_body_copy_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display)
{
    $element = array();

    switch ($display['type']) {
        case 'osci_tk_body_copy_formatter':
            $rendered_figures = array();

            foreach($items as $delta => $item) {
                $markup = check_markup($item['body_copy'], $item['body_copy_format']);

                $footnotes = $item['footnotes'];
                // Add anchor tags
                if (is_array($footnotes)) {
                    foreach($footnotes as $id => $footnote) {
                        $footnotes[$id] = theme('body_copy_footnote', array('fnId' => $id, 'fnCopy' => check_markup($footnote, $item['body_copy_format'])));
                    }
                }
                $markup .= theme_item_list(array('items' => $footnotes, 'title' => 'Footnotes', 'type' => 'ol', 'attributes' => array()));

                $figures = $item['figures'];
                if (is_array($figures)) {
                    foreach ($figures as $figure) {
                        $rendered_figures[] = theme('body_copy_figure', array('figure' => $figure));
                    }
                }
                $markup .= theme('item_list', array('items' => $rendered_figures, 'title' => t('Figures'), 'type' => 'ol'));

                $element[$delta]['#markup'] = $markup;
            }
            break;
    }
    osci_tk_default
    return $element;
}

/**************************************************************************
 * Field Type API: Widget
 **************************************************************************/

function osci_tk_body_copy_field_widget_info()
{

    return array(
        'osci_tk_body_copy_widget' => array(
            'label' => t('Body copy with footnotes & figures'),
            'field types' => array('osci_tk_body_copy'),
            'settings' => array('body_copy_rows' => 5, 'footnote_rows' => 3, 'figure_caption_rows' => 3),
            'behaviors' => array('default value' => FIELD_BEHAVIOR_NONE)
        )
    );
}

function osci_tk_body_copy_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)
{
    drupal_add_library('system', 'ui.tabs');
    drupal_add_library('system', 'ui.slider');

    $footnoteCount = isset($items[$delta]['footnote_index']) ? $items[$delta]['footnote_index'] : 0;
    $footnoteCount = $footnoteCount ? $footnoteCount : 0;

    $figureCount = isset($items[$delta]['figure_index']) ? $items[$delta]['figure_index'] : 0;
    $figureCount = $figureCount ? $figureCount : 0;

    $bodyCopy = array(
        '#type' => 'fieldset',
        '#attached' => array(
            'js' => array(
                array('data' => base_path() . 'sites/all/libraries/ckeditor/adapters/jquery.js', 'scope' => 'footer'),
                drupal_get_path('module', 'osci_tk_body_copy') . '/js/body_copy_field.js',
            ),
        ),
        'body_copy' => array(
            '#type' => 'text_format',
            '#base_type' => 'textarea',
            '#default_value' => isset($items[$delta]['body_copy']) ? $items[$delta]['body_copy'] : NULL,
            '#rows' => $instance['widget']['settings']['body_copy_rows'],
            '#format' => null,
        ),
        'footnotes' => array(
            '#type' => 'fieldset',
            '#attributes' => array('class' => array('footnotes-wrapper')),
            '#title' => t('Footnotes'),
            'footnote_index' => array(
                '#type' => 'hidden',
                '#default_value' => $footnoteCount
            ),
        ),
        'figures' => array(
            '#type' => 'fieldset',
            '#attributes' => array('class' => array('figures-wrapper')),
            '#title' => t('Figures'),
            'figure_index' => array(
                '#type' => 'hidden',
                '#default_value' => $figureCount,
                '#weight' => -100
            ),
        )
    );

    $footnotes = array('footnote_blank' => '');
    $loadnotes = (isset($items[$delta]['footnotes']) && !is_array($items[$delta]['footnotes'])) ? unserialize($items[$delta]['footnotes']) : array();
    if ($loadnotes) {
        $footnotes = array_merge($footnotes, $loadnotes);
    }

    $bodyCopy['footnotes']['add_another'] = array(
        '#markup' => '<a href="#" class="footnote-add-another">Add Footnote</a>',
        '#weight' => -1,
    );

    $fieldName = substr($field['field_name'], 6);
    $nid = $form['nid']['#value'];

    $fnList = array();
    foreach ($footnotes as $id => $footnote) {
        if ($id !== 'footnote_blank') {
            $id = substr($id, strrpos($id, '_') + 1);
        }
        $fnId = $fieldName . '_fn_' . $nid . '_' . $id;
        $class = ($id == 1) ? 'footnote first' : 'footnote';
        $bodyCopy['footnotes'][$id] = array(
            '#title' => $id . ' <span>[footnote:' . $fnId . ']</span>',
            '#type' => 'textarea',
            '#default_value' => $footnote,
            '#rows' => $instance['widget']['settings']['footnote_rows'],
            '#attributes' => array('class' => array($class)),
            '#prefix' => '<div id="' . $fnId . '" class="footnote-wrapper" data-fnprefix="' . $fieldName . '_fn_' . $nid . '_">',
            '#suffix' => '</div>',
            '#weight' => ($id == 'footnote_blank') ? -1 : $id
        );

        $fnList[] = '<li><a href="#' . $fnId . '">' . $id . '</a></li>';
    }

    $bodyCopy['footnotes']['footnote_list'] = array(
        '#markup' => '<ul>' . implode("\n", $fnList) . '</ul>',
        '#weight' => 0
    );

    $figures = array('figure_blank' => '');
    $loadFigures = isset($items[$delta]['figures']) ? unserialize($items[$delta]['figures']) : array();
    $figures += $loadFigures ? $loadFigures : array();

    $bodyCopy['figures']['add_another'] = array(
        '#markup' => '<a href="#" class="figure-add-another">Add Figure</a>',
        '#weight' => -1,
    );

    $figureList = array();
    foreach($figures as $id => $figure) {
        if ($id !== 'figure_blank') {
            $id = substr($id, strrpos($id, '_') + 1);
    	}
        $figId = $fieldName . '_fig_' . $nid . '_' . $id;
        $class = ($id == 1) ? 'figure first' : 'figure';
        
        // set up figure defaults
        $figDefault = isset($figure['figure_options']) ? $figure['figure_options'] : '{}';
        
        $figOpt = json_decode($figDefault);
        if (isset($figOpt->previewUri) && $figOpt->previewUri) {
        	$figOpt->previewUrl = image_style_url(
        		variable_get('osci_tk_image_style_body_copy_figure_preview', 'osci_tk_default'), 
        		$figOpt->previewUri
        	);
        }
        $figDefault = json_encode($figOpt);
        
        
        $bodyCopy['figures'][$id] = array(
            '#title'        => $id . ' <span>[figure:' . $figId . ']</span>',
            '#type'         => 'fieldset',
            '#attributes'   => array('class' => array($class)),
            '#prefix'       => '<div id="' . $figId . '" data-figprefix="' . $fieldName . '_fig_' . $nid . '_" class="figure-wrapper">',
            '#suffix'      => '</div>',
            '#weight'       => ($id == 'figure_blank') ? -1 : $id,
            '#tree'         => true,
            'figure_preview' => array(
                '#markup'	=> '<figure class="figure_reference_preview">&nbsp;</figure>',
            ),
            'figure_id'     => array(
                '#markup'   => '<div class="figure_identifier">' . $id . ' <span>[figure:' . $figId . ']</span> </div>'
            ),
            'figure_options' => array(
            	'#type' => 'hidden',
            	'#default_value' => $figDefault,
            	'#attributes' => array('class' => 'figure_options'),
            ),
            'figure_reference' => array(
                '#title'                => t('Figure Reference'),
                '#description'          => t('Type the identifier of the media that this figure should display.'),
                '#type'                 => 'textfield',
                '#autocomplete_path'    => 'ajax/figure',
            	'#attributes'			=> array('class' => array('figure_reference_field')),
                '#default_value'        => isset($figure['figure_reference']) ? $figure['figure_reference'] : '',
            ),
            'number_template' => array(
            	'#title'            => t('Number Template'),
                '#description'      => t('The template to use for generating the figure number. (cat# will be replaced with the catalog number, fig# will be replaced with the figure number)'),
                '#type'             => 'textfield',
                '#default_value'    => isset($figure['number_template']) ? $figure['number_template'] : 'Fig. cat#.fig#',
            ),
            'caption' => array(
                '#title'            => t('Caption'),
                '#description'      => t('The caption text to associate with this figure'),
                '#type'             => 'textarea',
                '#default_value'    => isset($figure['caption']) ? $figure['caption'] : '',
                '#rows'             => $instance['widget']['settings']['figure_caption_rows']
            ),
            'position' => array(
                '#title'            => t('Position'),
                '#description'      => t('A hint on how to place the figure on a page.'),
                '#type'             => 'select',
                '#default_value'    => isset($figure['position']) ? $figure['position'] : 'n',
                '#options'          => array(
                    't'     => 'top',
                    'b'     => 'bottom',
                    'tl'    => 'top left',
                    'tr'    => 'top right',
                    'bl'    => 'bottom left',
                    'br'    => 'bottom right',
                    'p'     => 'full page',
                    'n'     => 'none'
                )
            ),
            'columns' => array(
                '#title'            => t('Columns'),
                '#type'             => 'textfield',
                '#default_value'    => isset($figure['columns']) ? $figure['columns'] : '50%',
                '#description'      => t('A hint of how many columns the figure should span on a page. This can be either a number (1 or greater) or a percentage (0%-100%).')
            )
        );

        $figureList[] = '<li><a href="#' . $figId . '">' . $id . '</a></li>';
    }

    $bodyCopy['figures']['figure_list'] = array(
        '#markup' => '<ul>' . implode("\n", $figureList) . '</ul>',
        '#weight' => 0
    );

    return $element + $bodyCopy;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function osci_tk_body_copy_field_widget_settings_form($field, $instance)
{
    $widget = $instance['widget'];
    $settings = $widget['settings'];

    $form['body_copy_rows'] = array(
        '#type' => 'textfield',
        '#title' => t('Body Copy Rows'),
        '#description' => t('The number of rows to use for the Body Copy textarea.'),
        '#default_value' => $settings['body_copy_rows'],
        '#required' => TRUE,
        '#element_validate' => array('_element_validate_integer_positive')
    );

    $form['footnote_rows'] = array(
        '#type' => 'textfield',
        '#title' => t('Footnote Rows'),
        '#description' => t('The number of rows to use for the Footnote textarea.'),
        '#default_value' => $settings['footnote_rows'],
        '#required' => TRUE,
        '#element_validate' => array('_element_validate_integer_positive')
    );

    $form['figure_caption_rows'] = array(
        '#type' => 'textfield',
        '#title' => t('Figure Caption Rows'),
        '#description' => t('The number of rows to use for the Figure caption textarea.'),
        '#default_value' => $settings['figure_caption_rows'],
        '#required' => TRUE,
        '#element_validate' => array('_element_validate_integer_positive')
    );

    return $form;
}

function osci_tk_body_copy_figure_preview($nid) {
	// get node and ensure it's a valid figure type
	$node = node_load($nid);
	$ret = new stdClass();
	$time = time();
	$ret->time = $time;
	switch($node->type) {
		case "image":
			if (isset($node->field_image['und'][0])) {
				$ret->image = file_create_url($node->field_image['und'][0]['uri']);
				$ret->div = '<div style="width:100%;">'
					.theme_image_style(array(
                	    'style_name' => variable_get('osci_tk_image_style_body_copy_figure_preview', 'osci_tk_default'),
            			'path' => $node->field_image['und'][0]['uri'],
                	    'alt' => $node->title,
        		    	'title' => $node->title,
            			'attributes' => array(
        		           	'class' => 'preview_image',
							'style' => 'width:100%;'
        		    	)
        		    ))
					.'</div>';
			}
			break;
		case 'iip_asset':
		case 'svg_asset':
		case 'image_asset':
			$node->field_assets['und'][0]['nid'] = $node->nid;
        case "conservation_asset":
        	if (count($node->field_image) > 0) {
        		// there is a representative image, return it in a div
        		$ret->div = '<img class="preview_image" '
        			. 'src="'.image_style_url(variable_get('osci_tk_image_style_body_copy_figure_preview', 'osci_tk_default'), $node->field_image['und'][0]['uri']).'" />'
        			. '<div style="display:none;" data-aspect="'._osci_tk_conservation_get_conservation_aspect($node).'">'
        			._osci_tk_conservation_get_conservation_html($nid)
        			.'</div>';
        	}
        	else {
            	$ret->div = '<div class="preview_image">No Preview Available</div>'
            		. '<div style="display:none;" data-aspect="'._osci_tk_conservation_get_conservation_aspect($node).'">'
        			._osci_tk_conservation_get_conservation_html($nid)
        			.'</div>';
        	}
            break;
	}
	return drupal_json_output($ret);
}

function osci_tk_body_copy_figure_thumb_save() {
	preg_match('/data:\w+\/(\w+);base64,(.*)/', $_REQUEST['fileDataURI'], $matches);
	$fileType = $matches[1];
	switch($fileType) {
		case "jpeg":
			$ext = 'jpg';
			break;
		case "png":
			$ext = 'png';
			break;
		case "gif":
			$ext = 'gif';
			break;
	}
	$fileData = base64_decode(str_replace(' ','+',$matches[2]));
	$figureId = $_REQUEST['figureId'];
	$dir = $_SERVER['DOCUMENT_ROOT'].substr(base_path(),1)."/sites/default/files/previews/";
	
	// remove any previous thumbs for this figure
	$dirHandle = opendir($dir);
	while (($file = readdir($dirHandle)) !== FALSE) {
		if (strstr($file, $figureId)) {
			unlink(drupal_realpath("public://previews/".$file));
		}
	}
	
	// save the new figure thumb
	$filename = $figureId.'.'.time().'.'.$ext;
	file_put_contents($dir.$filename, $fileData);
	// form the return
	$ret = new stdClass;
	$ret->url = image_style_url(
		variable_get('osci_tk_image_style_body_copy_figure_preview', 'osci_tk_default'), 
		'public://previews/' . $filename
	);
	$ret->uri = 'public://previews/' . $filename;
	print json_encode($ret);
}

function osci_tk_body_copy_figure_reference($args) {
    $figs = db_select('node', 'n')
        ->fields('n', array('title', 'nid'))
        ->condition('type', array('html_figure', 'conservation_asset', 'image_asset', 'iip_asset', 'svg_asset'), 'IN')
        ->condition('status', 1)
        ->condition('title', '%'.db_like($args).'%', 'LIKE')
        ->orderBy('created', 'DESC')
        ->addTag('node_access')
        ->range(0, 100)
        ->execute();
    $matches = array();
    foreach($figs as $result) {
        $matches[$result->nid] = $result->title;
    }
    return drupal_json_output($matches);
}

function osci_tk_body_copy_osci_tk_image_types() {
	$types[] = array(
		'title'			=> 'Body Copy Authoring - Figure Preview',
		'variable'		=> 'osci_tk_image_style_body_copy_figure_preview',
		'description'	=> 'Thumbnail used to preview a figure while editing body copy'
	);
	$types[] = array(
		'title'			=> 'Body Copy - Figure Thumbnail',
		'variable'		=> 'osci_tk_image_style_body_copy_figure_thumbnail',
		'description'	=> 'Thumbnail used represent a figure'
	);
	$types[] = array(
		'title'			=> 'Body Copy - Figure 256',
		'variable'		=> 'osci_tk_image_style_body_copy_figure_256',
		'description'	=> 'A small version of a figure image'
	);
	$types[] = array(
		'title'			=> 'Body Copy - Figure 512',
		'variable'		=> 'osci_tk_image_style_body_copy_figure_512',
		'description'	=> 'A medium version of a figure image'
	);
	$types[] = array(
		'title'			=> 'Body Copy - Figure 1024',
		'variable'		=> 'osci_tk_image_style_body_copy_figure_1024',
		'description'	=> 'A large version of a figure image'
	);
	$types[] = array(
		'title'			=> 'Body Copy - Print',
		'variable'		=> 'osci_tk_image_style_body_copy_print',
		'description'	=> 'A version of a image for printing'
	);
	
	return $types;
}

function osci_tk_body_copy_form_alter(&$form, &$form_state, $form_id)
{
    if (strpos($form_id, '_node_form') !== false && isset($form['field_osci_tk_content_length'])) {
        $form['field_osci_tk_content_length']['und'][0]['value']['#type'] = 'hidden';
    }
}

function osci_tk_body_copy_node_submit($node, $form, &$form_state)
{
  
  if (isset($form_state['node']->field_osci_tk_content_length)) {
    
    $wordCount = 0;
    foreach($form_state['values'] as $k => $v) {
      
      $info = field_info_field($k);      
      if ($info['type'] == 'osci_tk_body_copy') {
        if (isset($v['und'][0]['body_copy'])) {
          $wordCount += str_word_count(strip_tags($v['und'][0]['body_copy']['value']));
        } elseif (isset($v['und'][0]['value'])) {
          $wordCount += str_word_count(strip_tags($v['und'][0]['value']));
        }                
      }
      
    }

    $form_state['node']->field_osci_tk_content_length['und'][0]['value'] = $wordCount;
    
  }
  
}

