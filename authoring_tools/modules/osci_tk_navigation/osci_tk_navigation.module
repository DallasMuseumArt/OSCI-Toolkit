<?php 


function osci_tk_navigation_menu() {
  
  $items = array();
  $items['navigation/get-toc'] = array(
    'title' => t('Table of contents'),
    'page callback' => 'osci_tk_navigation_get_toc',
    'access callback' => '_osci_tk_navigation_check_access',  
    'type' => MENU_CALLBACK
  );
  
  return $items;  
  
}


function osci_tk_navigation_get_toc($nid = null, $format = 'epub3') {

  if (is_null($nid)) return '';
  
  if ($format == 'json') {  
    $toc = _osci_tk_navigation_get_toc($nid);
    print json_encode($toc);
    exit();
  }

  $toc = _osci_tk_navigation_get_toc($nid);
  
  // Not using templates for performance. Might consider an XML library.
  $epub = "<nav epub:type='toc' id='toc-$nid'>";
  $epub .= "<h1>Table of Contents</h1>"; // Optional header
  $epub .= "<ol>"; // The only other element allowed as a child of <nav>
  
  /* 
   * The order of li elements contained within the toc nav element must match the order of 
   * the targeted elements within each targeted EPUB Content Document, and must also follow 
   * the order of Content Documents in the Publication spine.
   */
  
  $attr_fields = array('nid', 'mlid', 'length', 'total_length', 'editor', 'timestamp');
  
  foreach($toc as $item) {    

    // Export data fields into html attributes
    $attr_data = array();
    foreach ($attr_fields as $field) {
      if (isset($item[$field])) {
        $attr_data[]= "data-$field='{$item[$field]}'";
      }
      $data_str = count($attr_data) ? join(' ', $attr_data) : '';    
    }    
    
    // <a> points to the target within the EPUB ContentDocument
    $epub .= "<li><a $data_str href='{$item['bodycopy']}'>{$item['title']}</a></li>";      
  }
    
  $epub .= "</ol></nav>";

  print $epub; exit();  
  
}


function osci_tk_navigation_services_resources()
{
    return array(
        'navigation' => array(
            'retrieve' => array(
                'callback' => '_osci_tk_navigation_get_toc',
                'args' => array(
                    array(
                        'name' => 'nid',
                        'optional' => false,
                        'type' => 'int',
                        'description' => 'The nid to load the table of contents for.',
                        'source' => array('path' => '0')
                    ),
                    array(
                        'name' => 'full_book',
                        'type' => 'int',
                        'description' => 'Display navigation details for the full book this node belongs to.',
                        'optional' => true,
                        'source' => array('param' => 'full_book'),
                        'default' => false
                    )
                ),
                'access callback' => "_osci_tk_navigation_check_access",
                //'access arguments' => array('access content'),
                //'access arguments append' => false
            ),
            'index' => array(
                'callback' => '_osci_tk_navigation_get_books',
                'access callback' => "_osci_tk_navigation_check_access",
                //'access arguments' => array('access content'),
                //'access arguments append' => false
            ),
            'relationships' => array(
                'next' => array(
                    'callback' => '_osci_tk_navigation_next',
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => false,
                            'type' => 'int',
                            'description' => 'The nid to load the table of contents for.',
                            'source' => array('path' => '0')
                        ),
                    ),
                    'access callback' => "_osci_tk_navigation_check_access",
                ),
                'prev' => array(
                    'callback' => '_osci_tk_navigation_prev',
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => false,
                            'type' => 'int',
                            'description' => 'The nid to load the table of contents for.',
                            'source' => array('path' => '0')
                        ),
                    ),
                    'access callback' => "_osci_tk_navigation_check_access",
                ),
                'parent' => array(
                    'callback' => '_osci_tk_navigation_parent',
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => false,
                            'type' => 'int',
                            'description' => 'The nid to load the table of contents for.',
                            'source' => array('path' => '0')
                        ),
                    ),
                    'access callback' => "_osci_tk_navigation_check_access",
                ),
                'book' => array(
                    'callback' => '_osci_tk_navigation_get_book_toc',
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => false,
                            'type' => 'int',
                            'description' => 'The nid to load the table of contents for.',
                            'source' => array('path' => '0')
                        ),
                    ),
                    'access callback' => "_osci_tk_navigation_check_access",
                )
            )
        )
    );
}


function _osci_tk_navigation_check_access()
{
    return true;
}


function _osci_tk_navigation_get_toc($nid, $fullBook = false)
{
    $toc = null;
    $node = node_load($nid);

    if (isset($node->book)) {
        if ($fullBook) {
            foreach (book_get_books() as $book_id => $book) {
                if ($book['bid'] == $node->book['bid']) {
                    $toc = book_menu_subtree_data($book);
                    $toc = _osci_tk_navigation_clean_toc($toc);
                    _osci_tk_navigation_load_additional_toc_data($toc);
                    break;
                }
            }
        } else {
            $toc = book_menu_subtree_data($node->book);
            $toc = _osci_tk_navigation_clean_toc($toc);
            _osci_tk_navigation_load_additional_toc_data($toc);
        }
    }
    
    return $toc;
}

function _osci_tk_navigation_get_book_toc($nid)
{
    $toc = null;
    $cacheKey = "osci_toc_" . $nid;
    
    $toc = &drupal_static($cacheKey);
    if (!isset($toc)) {
        if ($cache = cache_get($cacheKey)) {
            $toc = $cache->data;
        }
        else {
            $node = node_load($nid);
            
            if (isset($node->book)) {
                foreach (book_get_books() as $book_id => $book) {
                    if ($book['bid'] == $node->book['bid']) {
                        $toc = book_menu_subtree_data($book);
                        $toc = _osci_tk_navigation_clean_toc($toc);
                        _osci_tk_navigation_load_additional_toc_data($toc);
                        break;
                    }
                }
            }
            
            cache_set($cacheKey, $toc, 'cache');
        }
    }

    return $toc;
}


function _osci_tk_navigation_get_books()
{
    $allBooks = array();
    $books = book_get_books();

    foreach($books as $book) {
        $allBooks['bid_' . $book['bid']] = array_pop(_osci_tk_navigation_clean_toc(array('link' => $book)));
    }

    return $allBooks;
}


function _osci_tk_navigation_next($nid)
{
    $toc = array();
    $node = node_load($nid);

    if ($node->book) {
        if ($next = book_next($node->book)) {
            $toc = _osci_tk_navigation_clean_toc(array('link' => $next));
        }
    }

    return $toc;
}


function _osci_tk_navigation_prev($nid)
{
    $toc = array();
    $node = node_load($nid);

    if ($node->book) {
        if ($prev = book_prev($node->book)) {
            $toc = _osci_tk_navigation_clean_toc(array('link' => $prev));
        }
    }

    return $toc;
}


function _osci_tk_navigation_parent($nid)
{
    $toc = array();
    $node = node_load($nid);
    if ($node->book['plid'] && $parent = book_link_load($node->book['plid'])) {
        $toc = _osci_tk_navigation_clean_toc(array('link' => $parent));
    }
    return $toc;
}

function _osci_tk_navigation_clean_toc($toc)
{
    $cleanToc = _osci_tk_navigation_clean_toc_iterate($toc);
    $totalLength = 0;
    $rootId = null;
    foreach($cleanToc as $id => $toc) {
        $totalLength += $toc['length'];
        $rootId = ($rootId === null) ? $id : $rootId;
    }

    if ($rootId) {
        $cleanToc[$rootId]['total_length'] = $totalLength;
    }

    return $cleanToc;
}


function _osci_tk_navigation_clean_toc_iterate($toc)
{
    $cleanToc = array();

    $id = null;
    $nids = array();
    foreach($toc as $k => $v) {
        switch ($k) {
            case 'link':
                if (isset($v['nid'])) {
                    $nid = $v['nid'];
                } else {
                    $nid = substr($v['href'], strrpos($v['href'], '/') + 1);
                }
                $nids[] = $nid;

                $id = 'nid_' . $nid;
                $nextPage = null;
                $prevPage = null;
                $parentPage = null;
                if ($v['mlid']) {
                    if ($prev = book_prev($v)) {
                        $prevPage = substr($prev['href'], strrpos($prev['href'], '/') + 1);
                        $nids[] = $prevPage;
                    }

                    if ($v['plid'] && $parent = book_link_load($v['plid'])) {
                        $parentPage = substr($parent['href'], strrpos($parent['href'], '/') + 1);
                        $nids[] = $parentPage;
                    }

                    if ($next = book_next($v)) {
                        $nextPage = substr($next['href'], strrpos($next['href'], '/') + 1);
                        $nids[] = $nextPage;
                    }
                }
                $alias = drupal_lookup_path("alias", $v['href']);

                $cleanToc[$id] = array(
                    'nid'      => $nid,
                    'title'    => $v['title'],
                    'href'     => url("reader/" . $alias),
                    'print'    => url("print/" . $alias),
                    'bodycopy' => url($v['href'] . '/bodycopy'),
                    'mlid'     => $v['mlid'],
                    'next'     => $nextPage,
                    'prev'     => $prevPage,
                    'parent'   => $parentPage
                );

                if (isset($v['bid'])) {
                    $cleanToc[$id]['bid'] = $v['bid'];
                }

                break;
            case 'below':
                //if (is_array($v) && !empty($v)) {
                //    $cleanToc[$bidNid]['children'] = _osci_tk_navigation_clean_toc_iterate($v);
                //}
                //break;
            default:
                if (is_array($v) && !empty($v)) {
                    $cleanToc = array_merge($cleanToc, _osci_tk_navigation_clean_toc_iterate($v));
                }
        }
    }

    $contentLengths = _osci_tk_navigation_get_node_content_length($nids);
    if (!empty($contentLengths)) {
        foreach($cleanToc as $id => $toc) {
            if (isset($contentLengths[$toc['nid']])) {
                $cleanToc[$id]['length'] = $contentLengths[$toc['nid']];
            }
            if (isset($toc['next']['nid']) && isset($contentLengths[$toc['next']['nid']])) {
                $cleanToc[$id]['next']['length'] = $contentLengths[$toc['next']['nid']];
            }
            if (isset($toc['prev']['nid']) && isset($contentLengths[$toc['prev']['nid']])) {
                $cleanToc[$id]['prev']['length'] = $contentLengths[$toc['prev']['nid']];
            }
            if (isset($toc['parent']['nid']) && isset($contentLengths[$toc['parent']['nid']])) {
                $cleanToc[$id]['parent']['length'] = $contentLengths[$toc['parent']['nid']];
            }
        }
    }

    return $cleanToc;
}


function osci_tk_navigation_node_submit($node, $form, &$form_state)
{
    if (isset($form_state['node']->field_osci_tk_content_length)) {
        $wordCount = 0;

        foreach($form_state['values'] as $k => $v) {
            if (strpos($k, 'field_osci_tk') === 0) {
                if (isset($v['und'][0]['body_copy'])) {
                    $wordCount += str_word_count(strip_tags($v['und'][0]['body_copy']['value']));
                } elseif (isset($v['und'][0]['value'])) {
                    $wordCount += str_word_count(strip_tags($v['und'][0]['value']));
                }
            }
        }

        $form_state['node']->field_osci_tk_content_length['und'][0]['value'] = $wordCount;
    }
}


function osci_tk_navigation_form_alter(&$form, &$form_state, $form_id)
{
    if (strpos($form_id, '_node_form') !== false && isset($form['field_osci_tk_content_length'])) {
        $form['field_osci_tk_content_length']['und'][0]['value']['#type'] = 'hidden';
    }
}


function _osci_tk_navigation_get_node_content_length($nids)
{
    $contentLengths = array();

    if ($nodes = node_load_multiple($nids)) {
        foreach($nodes as $nid => $node) {
            $contentLengths[$nid] = isset($node->field_osci_tk_content_length['und'][0]['value']) ? $node->field_osci_tk_content_length['und'][0]['value'] : 0;
        }
    }

    return $contentLengths;
}


function _osci_tk_navigation_load_additional_toc_data(&$toc)
{
    $imageData = array();
    $inactiveIds = array();
    
    foreach($toc as $tocId => $data) {
        $nid = (int)$data['nid'];
        $active = true;
        
        //if parent is inactive remove from toc
        if (count($data['parent']) && in_array($data['parent']['nid'], $inactiveIds))
        {
            unset($toc[$tocId]);
            $inactiveIds[] = $nid;
            continue;
        }
        
        $node = node_load($nid);
        
        if ($node->type === "volume" && isset($node->field_osci_tk_editor['und'][0])) {
            $data['editor'] = $node->field_osci_tk_editor['und'][0]['value'];
        }
        
        if (!isset($node->field_active['und']) || $node->field_active['und'][0]['value'] == 0) {
            $inactiveIds[] = $nid;
            $active = false;
        }

        if (isset($node->field_osci_tk_navigation_title['und'][0]['value'])) {
            $data['title'] = check_markup($node->field_osci_tk_navigation_title['und'][0]['value'], $node->field_osci_tk_navigation_title['und'][0]['format']);
        }

        $data['timestamp'] = $node->changed;

        $subSections = array();
        if ($active) 
        {
            $view = node_view($node, "body_copy");
        
            foreach($view as $k => $v) {
                if (is_array($v) && isset($v['#weight']) && $k !== 'field_osci_tk_plate_image' && strlen($v[0]['#markup'])) {
                    $subSections[$v['#weight']] = array(
                        'title' => $v['#title'],
                        'field' => $v['#field_name']
                    );
                    
                    $authorField = str_replace("_osci_", "_author_", $v['#field_name']);
                    if (isset($node->{$authorField}) && isset($node->{$authorField}['und'][0])) {
                        $subSections[$v['#weight']]['author'] = $node->{$authorField}['und'][0]['value'];
                    }
                }
            }
        }

        $data['active'] = $active ? 1 : 0;
        
        if ($subSections) {
            ksort($subSections);
            $data['sub_sections'] = array_values($subSections);
        }

        if (isset($imageData[$nid])) {
            $data['plate_image'] = $imageData[$nid];
        } else {
            $imageData[$nid] = _osci_tk_navigation_get_image_data($nid);
            $data['plate_image'] = $imageData[$nid];
        }

        $toc[$tocId] = $data;
    }
}


function _osci_tk_navigation_get_image_data($nid)
{
    $imageData = array();

    $node = node_load($nid);
    if (isset($node->field_osci_tk_plate_image['und']) && $node->field_osci_tk_plate_image['und'][0]['nid']) {
        $imageNode = node_load($node->field_osci_tk_plate_image['und'][0]['nid']);
        $fullImageUrl = file_create_url($imageNode->field_image['und'][0]['uri']);
        $thumbnail165Url = image_style_url('osci_tk_thumbnail_165w', $imageNode->field_image['und'][0]['uri']);
        $thumbnail100Url = image_style_url('osci_tk_thumbnail_100w', $imageNode->field_image['und'][0]['uri']);

        $imageData = array(
            'full_image_url' => $fullImageUrl,
            'thumbnail_165w_url' => $thumbnail165Url,
            'thumbnail_100w_url' => $thumbnail100Url
        );
    }

    return $imageData;
}
?>