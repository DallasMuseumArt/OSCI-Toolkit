<?php 


function osci_tk_notes_menu() {
	global $user;
	$items = array();
	
	$items['notes'] = array(
		'title'			 	=> t('Process a note request'),
		'page callback'	 	=> 'osci_tk_notes_request',
		'access callback' 	=> array($user->uid)
	);
	
	$items['notes/demo'] = array(
		'title'			 	=> t('Demonstrate Notes Functionality'),
		'page callback'		=> 'drupal_get_form',
		'page arguments' 	=> array('osci_tk_notes_demo'),
		'access callback'  	=> array(($user->uid == 1))
	);
	
	return $items;
}

function osci_tk_notes_request() {
	global $user;
	$args = array();
	
	if ($user->uid > 0) {
		if (count($_POST) > 0) {
			// POST request, insert a note into the db
			if (isset($_POST['section_id']) && !empty($_POST['section_id'])
				&& isset($_POST['paragraph_id']) && !empty($_POST['paragraph_id'])
				&& isset($_POST['note']) && !empty($_POST['note'])) {
				
				// find the section id
				$section = node_load($_POST['section_id']);
				if ($section) {
					// form the new note object
					$note = new stdClass();
					$note->type = "note";
					node_object_prepare($note);
					$note->language = LANGUAGE_NONE;
					$note->uid = $user->uid;
					$note->status = 1;
					$note->title = $user->name.' s'.$section->nid.' p'.$_POST['paragraph_id'];
					$note->body['und'][0]['value'] = $_POST['note'];
					$note->field_section['und'][0]['nid'] = $section->nid;
					$note->field_paragraph_id['und'][0]['value'] = $_POST['paragraph_id'];
					
					// support tags
					$vocab_list = taxonomy_vocabulary_get_names();
					$tags_vid = $vocab_list['note_tags']->vid;
					if (isset($_POST['tags']) && count($_POST['tags']) > 0) {
						foreach ($_POST['tags'] as $tag) {
							if (!empty($tag)) {
								// test if this tag already exist in our vocab
								$matched = FALSE;
								$matches = taxonomy_get_term_by_name($tag);
								foreach ($matches as $match) {
									if ($match->vid == $tags_vid) {
										$matched = TRUE;
										$note->field_note_tags['und'][]['tid'] = $match->tid;
									}
								}
								if (!$matched) {
									// no existing tag, create a new term
									$term = new stdClass();
									$term->vid = $tags_vid;
									$term->name = $tag;
									taxonomy_term_save($term);
									$note->field_note_tags['und'][]['tid'] = $term->tid;
								}
							}
						}
					}
					
					node_save($note);
					print json_encode(array('success' => TRUE));
					return;
				}
			}
			// if execution reaches this point, the note submission wasn't saved, send error
			print json_encode(array('success' => FALSE));
			return;
		}

		// GET request, retreive user's notes
		else {
			$query = db_select('node', 'n');
			$query->fields('n', array('nid'));
			$query->condition('n.uid', $user->uid, '=');
			$query->condition('n.type', 'note', '=');
			
			$query->join('field_data_body', 'b', 'n.nid = b.entity_id');
			$query->addField('b', 'body_value', 'body');
			
			$query->join('field_data_field_section', 's', 'n.nid = s.entity_id');
			$query->addField('s', 'field_section_nid', 'sid');
			
			$query->join('field_data_field_paragraph_id', 'p', 'n.nid = p.entity_id');
			$query->addField('p', 'field_paragraph_id_value', 'pid');
			
			if (isset($_GET['section_id']) && !empty($_GET['section_id'])) {
				$query->condition('s.field_section_nid', $_GET['section_id']);
			}
			
			if (isset($_GET['paragraph_id']) && !empty($_GET['paragraph_id'])) {
				$query->condition('p.field_paragraph_id_value', $_GET['paragraph_id']);
			}
			$result = $query->execute();
			$notes = array();
			foreach ($result as $row) {
				// get the tags for this note
				$tags = array();
				$tag_result = db_query('SELECT field_note_tags_tid as tid 
					FROM {field_data_field_note_tags} 
					WHERE entity_id = :nid', 
					array('nid' => $row->nid));
				foreach ($tag_result as $tag_row) {
					$tag = taxonomy_term_load($tag_row->tid);
					if ($tag) {
						$tags[] = $tag->name;
					}
				}
				// form the returned note
				$notes[] = array(
					'section_id' 	=> $row->sid,
					'paragraph_id' 	=> $row->pid,
					'note' 			=> $row->body,
					'tags' 			=> $tags
				);
			}
			print json_encode(array('success' => TRUE, 'notes' => $notes));
			return;
		}
	}
}

function osci_tk_notes_demo() {
	global $user;
	drupal_add_js(drupal_get_path('module', 'osci_tk_notes') . '/js/demo.js');
	
	$form = array();
	
	$form['store'] = array(
		'#type'				=> 'fieldset',
		'#title'			=> 'Store a User Note',
		'#attributes'		=> array('class' => array('store-form'))
	);
	$form['store']['uid'] = array(
		'#type'				=> 'textfield',
		'#title'			=> 'User id',
		'#default_value'	=> $user->uid,
		'#required'			=> FALSE,
		'#disabled'			=> TRUE
	);
	$form['store']['section_id'] = array(
		'#type'				=> 'textfield',
		'#title'			=> 'Section id',
		'#required'			=> TRUE
	);
	$form['store']['paragraph_id'] = array(
		'#type'				=> 'textfield',
		'#title'			=> 'Paragraph id',
		'#required'			=> TRUE
	);
	$form['store']['tags'] = array(
		'#type'				=> 'textfield',
		'#title'			=> 'Tags',
		'#description'		=> 'Comma separated list of tags'
	);
	$form['store']['note'] = array(
		'#type'				=> 'textarea',
		'#title'			=> 'Note',
		'#required'			=> TRUE
	);
	$form['store']['submit'] = array(
		'#type'				=> 'button',
		'#title'			=> 'Paragraph id',
		'#value'			=> 'Submit',
		'#required'			=> TRUE
	);
	$form['store']['result'] = array(
		'#type'				=> 'item',
		'#title'			=> 'Result',
		'#markup'			=> '<pre style="width: 600px;"><div id="store-result"></div></pre>'
	);
	
	$form['retrieve'] = array(
		'#type'				=> 'fieldset',
		'#title'			=> 'Retrieve a User Note',
		'#attributes'		=> array('class' => array('retrieve-form'))
	);
	$form['retrieve']['uid'] = array(
		'#type'				=> 'textfield',
		'#title'			=> 'User id',
		'#default_value'	=> $user->uid,
		'#required'			=> FALSE,
		'#disabled'			=> TRUE
	);
	$form['retrieve']['section_id'] = array(
		'#type'				=> 'textfield',
		'#title'			=> 'Section id',
	);
	$form['retrieve']['paragraph_id'] = array(
		'#type'				=> 'textfield',
		'#title'			=> 'Paragraph id',
	);
	$form['retrieve']['submit'] = array(
			'#type'			=> 'button',
			'#title'		=> 'Paragraph id',
			'#value'		=> 'Submit',
			'#required'		=> TRUE
	);
	$form['retrieve']['result'] = array(
			'#type'			=> 'item',
			'#title'		=> 'Result',
			'#markup'		=> '<pre style="width: 600px;"><div id="ret-result"></div></pre>'
	);
	
	return $form;
}