<?php

/***********************************************************************
 *
 * Drupal Hooks
 *
 */

function osci_tk_filters_init() {
    drupal_add_js(libraries_get_path('fancybox').'/fancybox/jquery.fancybox-1.3.4.js', array('weight' => '5'));
    drupal_add_css(libraries_get_path('fancybox').'/fancybox/jquery.fancybox-1.3.4.css');
    drupal_add_js(drupal_get_path('module', 'osci_tk_filters').'/js/osci_tk_filters.js', array('weight' => '5'));
    drupal_add_css(drupal_get_path('module', 'osci_tk_filters').'/css/osci_tk_filters.css');
    $settings = array(
        'osci_tk_filters' => array(
            'modulePath' => base_path().drupal_get_path('module', 'osci_tk_filters'),
			'current_nid' => arg(1)
        ),
    );
    drupal_add_js($settings, 'setting');
}

/**
 * Implementation of hook_filter_info
 */
function osci_tk_filters_filter_info() {
    $filters = array();

    // Footnotes
    $filters['osci_tk_footnote'] = array(
        'title'             => t('Footnote filter'),
        'description'       => t('Allow filters for footnotes'),
        'process callback'  => '_filter_footnote',
        'settings callback' => '_filter_settings',
        'tips callback'     => '_filter_footnote_tips',
		'cache'				=> false
    );

    $filters['osci_tk_figure'] = array(
        'title'             => t('Figure filter'),
        'description'       => t('Add references to figures in content'),
        'process callback'  => '_filter_figure',
        'settings callback' => '_filter_settings',
        'tips callback'     => '_filter_figure_tips',
		'cache'				=> false
    );
    
    $filters['osci_tk_cross_link'] = array(
        'title'             => t('Cross Link filter'),
        'description'       => t('Allow cross content linking within a book'),
        'process callback'  => '_filter_cross_link',
        'settings callback' => '_filter_settings',
        'tips callback'     => '_filter_cross_link_tips',
		'cache'				=> false
    );

    $filters['osci_tk_cross_link'] = array(
        'title'             => t('Cross Link filter'),
        'description'       => t('Allow cross content linking within a book'),
        'process callback'  => '_filter_cross_link',
        'settings callback' => '_filter_settings',
        'tips callback'     => '_filter_cross_link_tips',
        'cache'             => false
    );

    $filters['osci_tk_clean_content'] = array(
        'title'             => t('Clean Content'),
        'description'       => t('Remove encoded html entities and replace with proper characters.'),
        'process callback'  => '_filter_clean_content',
        'settings callback' => '_filter_settings',
        'tips callback'     => '_filter_clean_content_tips',
        'cache'             => false
    );

    return $filters;
}

/**
 * Implementation of hook_wysiwyg_plugin
 */
function osci_tk_filters_wysiwyg_plugin($editor, $version) {
    switch($editor) {
        case 'ckeditor':
            return array(
                'osci_tk_filters' => array(
                    'path'      => drupal_get_path('module', 'osci_tk_filters').'/js',
                    'buttons'   => array(
                        'footnote'  => t('OSCI - Footnote'),
                        'figure'    => t('OSCI - Figure'),
                    ),
                    'load'      => TRUE,
                ),
            );
            break;
    }
}

/**
 * Empty settings function, seems to be required by hook_filter_info
 */
function _filter_settings() {}

/***********************************************************************
 *
 * FOOTNOTE
 *
 */

/**
 * Process callback for filter
 */
function _filter_footnote($text, $filter, $format) {
	global $osci_tk_view_mode;
	
	$osci_tk_view_mode = isset($osci_tk_view_mode) ? $osci_tk_view_mode : 'full';
	$result = module_invoke_all('osci_tk_filter_footnote_' . $osci_tk_view_mode, $text, $filter, $format);
	return is_array($result) && count($result) ? $result[0] : $text;
}

function osci_tk_filters_osci_tk_filter_footnote_default($text, $filter, $format)
{
    $regex = '/\[footnote:(.*?)\]/i';
    $regex = '/\[footnote:(fn-\d+-(\d+))\]/i';

    return preg_replace_callback($regex, '_process_footnote', $text);
}

/**
 * Regex replace callback
 */
function _process_footnote($text) {
    if (empty($text[1])) return $text[0];

	return '<a href="#'.$text[1].'" class="superscript footnote-link">'.$text[2].'</a>';
}

/**
 * Tooltip funcion
 */
function _filter_footnote_tips() {
    return t('Insert a footnote with [footnote:ID]');
}

/***********************************************************************
 *
 * FIGURE
 *
 */

function _filter_figure($text, $filter, $format) 
{
	global $osci_tk_view_mode;

	$osci_tk_view_mode = isset($osci_tk_view_mode) ? $osci_tk_view_mode : 'default';
	$result = module_invoke_all('osci_tk_filter_figure_' . $osci_tk_view_mode, $text, $filter, $format);
	return is_array($result) && count($result) ? $result[0] : $text;
}

function osci_tk_filters_osci_tk_filter_figure_default($text, $filter, $format)
{
	$regex = '/\[figure:(.*?)\]/i';

	return preg_replace_callback($regex, '_process_figure', $text);
}

function _process_figure($text) {
    if (empty($text[1])) return $text[0];

    return '<a href="#'.$text[1].'" class="figure-link">'.$text[1].'</a>';
}

function _filter_figure_tips() {
    return t('Insert a figure with [figure:ID]');
}
/************** INSERT OTHER FILTER FUNCTIONS HERE ********************/


/***********************************************************************
 *
 * HELPER FUNCTIONS
 *
 */

/*
 * @param $text
 * A string of text with arguments
 * @return
 * A keyed array with id and args
 */
function _process_args($text) {
    $data = array();
    $temp = explode('|', $text);
    if (isset($temp[0])) {
        $data['id'] = $temp[0];
    }
    
    if (isset($temp[1])) {
        $args = explode(',', $temp[1]);

        foreach ($args as $val) {
            $arg = explode('=', $val);
            if (isset($arg[0]) && isset($arg[1])) {
                $data['args'][$arg[0]] = $arg[1];
            }
        }
    }

    return $data;
}

/***********************************************************************
 *
 * Cross linking
 *
 */

/**
 * Process callback for filter
 */
function _filter_cross_link($text, $filter, $format) {
	global $osci_tk_view_mode;
	
	$osci_tk_view_mode = isset($osci_tk_view_mode) ? $osci_tk_view_mode : 'default';
	$result = module_invoke_all('osci_tk_filter_cross_link_' . $osci_tk_view_mode, $text, $filter, $format);
	return is_array($result) && count($result) ? $result[0] : $text;
}

function osci_tk_filters_osci_tk_filter_cross_link_default($text, $filter, $format)
{
    $regex = '/\[link:(.*?)\]/i';

    return preg_replace_callback($regex, '_process_cross_link', $text);
}

/**
 * Regex replace callback
 */
function _process_cross_link($text) {
    if (empty($text[1])) return $text[0];
    $args = _process_args($text[1]);

    $nid = $args['id'];
    $url = url("node/{$nid}/reader");
    $linkText = isset($args['args']['text']) ? $args['args']['text'] : "Link " . $nid;
    
    $query = "";
    if (isset($args['args']['paragraph'])) {
        $query = "#para-" . $args['args']['paragraph'];
    }
    
    if (isset($args['args']['section'])) {
        $query = '#field_' . $args['args']['section'] . '_anchor';
    }
    
    if ($query) {
        $url = url("node/{$nid}/reader", array('fragment' => substr($query, 1)));
        $query = "data-query=\"$query\"";
    }

    return "<a href=\"{$url}\" class=\"cross-link\" target=\"_blank\" data-nid=\"{$nid}\" {$query}>{$linkText}</a>";
}

/**
 * Tooltip funcion
 */
function _filter_cross_link_tips() {
    return t('Insert a Link with [link:Node ID]');
}

/***********************************************************************
 *
 * Clean Content
 *
 */

/**
 * Process callback for filter
 */
function _filter_clean_content($text, $filter, $format) {
    // global $osci_tk_view_mode;
    
    // $osci_tk_view_mode = isset($osci_tk_view_mode) ? $osci_tk_view_mode : 'default';
    // $result = module_invoke_all('osci_tk_filter_cross_link_' . $osci_tk_view_mode, $text, $filter, $format);
    // return is_array($result) && count($result) ? $result[0] : $text;

    // $remove = array(
    //     '&nbsp;'
    // );

    // $replace = array(
    //     ''
    // );

    return html_entity_decode($text);
}



/**
 * Tooltip funcion
 */
function _filter_clean_content_tips() {
    return null;
}